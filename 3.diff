diff --git a/pom.xml b/pom.xml
index 5b9ac56..90aadbc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,41 +1,119 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.springframework.boot</groupId>
-		<artifactId>spring-boot-starter-parent</artifactId>
-		<version>2.6.1</version>
-		<relativePath/> <!-- lookup parent from repository -->
-	</parent>
-	<groupId>com.example</groupId>
-	<artifactId>demo</artifactId>
-	<version>0.0.1-SNAPSHOT</version>
-	<name>demo</name>
-	<description>Demo project for Spring Boot</description>
-	<properties>
-		<java.version>1.8</java.version>
-	</properties>
-	<dependencies>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter</artifactId>
-		</dependency>
-
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-test</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.springframework.boot</groupId>
-				<artifactId>spring-boot-maven-plugin</artifactId>
-			</plugin>
-		</plugins>
-	</build>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
+  http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>com.library_project</groupId>
+    <artifactId>xml_project</artifactId>
+    <packaging>jar</packaging>
+    <version>1.0</version>
+
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>1.5.1.RELEASE</version>
+    </parent>
+
+    <properties>
+        <java.version>1.8</java.version>
+    </properties>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-thymeleaf</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.dataformat</groupId>
+            <artifactId>jackson-dataformat-xml</artifactId>
+        </dependency>
+
+        <!-- hot swapping, disable cache for template, enable live reload -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-devtools</artifactId>
+            <optional>true</optional>
+        </dependency>
+
+        <dependency>
+            <groupId>org.webjars</groupId>
+            <artifactId>jquery</artifactId>
+            <version>2.2.4</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.webjars</groupId>
+            <artifactId>bootstrap</artifactId>
+            <version>3.3.7</version>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web-services</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>wsdl4j</groupId>
+            <artifactId>wsdl4j</artifactId>
+        </dependency>
+
+
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>io.springfox</groupId>
+            <artifactId>springfox-swagger2</artifactId>
+            <version>2.6.1</version>
+            <scope>compile</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>io.springfox</groupId>
+            <artifactId>springfox-swagger-ui</artifactId>
+            <version>2.6.1</version>
+            <scope>compile</scope>
+        </dependency>
+
+        <!-- https://mvnrepository.com/artifact/org.json/json -->
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+            <version>20210307</version>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <!-- Package as an executable jar/war -->
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>jaxb2-maven-plugin</artifactId>
+                <version>1.6</version>
+                <executions>
+                    <execution>
+                        <id>xjc</id>
+                        <goals>
+                            <goal>xjc</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <schemaDirectory>${project.basedir}/src/main/resources/</schemaDirectory>
+                    <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
+                    <clearOutputDir>false</clearOutputDir>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 
 </project>
diff --git a/src/main/java/com/example/demo/DemoManager.java b/src/main/java/com/example/demo/DemoManager.java
deleted file mode 100644
index 3c47930..0000000
--- a/src/main/java/com/example/demo/DemoManager.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.example.demo;
-
-public class DemoManager {
-    public static void main(String[] args) throws Exception {
-        Utils camel = new Utils();
-        camel.withXSLT();
-        camel.camelRest();
-    }
-}
diff --git a/src/main/java/com/library_project/DemoManager.java b/src/main/java/com/library_project/DemoManager.java
new file mode 100644
index 0000000..b779183
--- /dev/null
+++ b/src/main/java/com/library_project/DemoManager.java
@@ -0,0 +1,9 @@
+package com.library_project;
+
+public class DemoManager {
+        public void start() throws Exception {
+            Utils camel = new Utils();
+            camel.withXSLT();
+            camel.camelRest();
+        }
+}
diff --git a/src/main/java/com/example/demo/NewStylesheet.xsl b/src/main/java/com/library_project/NewStylesheet.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet.xsl
rename to src/main/java/com/library_project/NewStylesheet.xsl
diff --git a/src/main/java/com/example/demo/NewStylesheet1.xsl b/src/main/java/com/library_project/NewStylesheet1.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet1.xsl
rename to src/main/java/com/library_project/NewStylesheet1.xsl
diff --git a/src/main/java/com/example/demo/NewStylesheet2.xsl b/src/main/java/com/library_project/NewStylesheet2.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet2.xsl
rename to src/main/java/com/library_project/NewStylesheet2.xsl
diff --git a/src/main/java/com/example/demo/NewStylesheet3.xsl b/src/main/java/com/library_project/NewStylesheet3.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet3.xsl
rename to src/main/java/com/library_project/NewStylesheet3.xsl
diff --git a/src/main/java/com/example/demo/NewStylesheet4.xsl b/src/main/java/com/library_project/NewStylesheet4.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet4.xsl
rename to src/main/java/com/library_project/NewStylesheet4.xsl
diff --git a/src/main/java/com/example/demo/NewStylesheet5.xsl b/src/main/java/com/library_project/NewStylesheet5.xsl
similarity index 100%
rename from src/main/java/com/example/demo/NewStylesheet5.xsl
rename to src/main/java/com/library_project/NewStylesheet5.xsl
diff --git a/src/main/java/com/example/demo/REST.java b/src/main/java/com/library_project/REST.java
similarity index 83%
rename from src/main/java/com/example/demo/REST.java
rename to src/main/java/com/library_project/REST.java
index 8d74c56..1829f42 100644
--- a/src/main/java/com/example/demo/REST.java
+++ b/src/main/java/com/library_project/REST.java
@@ -1,4 +1,4 @@
-package com.example.demo;
+package com.library_project;
 
 import org.apache.camel.Exchange;
 import org.apache.camel.builder.RouteBuilder;
@@ -34,7 +34,7 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet.xsl");
 
         // 2nd.request
         //http://localhost:1234/tema/booksCopyright/2010
@@ -42,7 +42,7 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet1.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet1.xsl");
 
         // 3th.request
         // http://localhost:1234/tema/booksStartWithA
@@ -50,7 +50,7 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet2.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet2.xsl");
 
         // 4th.request
         // http://localhost:1234/tema/booksContainsWord/Arta
@@ -58,7 +58,7 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet3.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet3.xsl");
 
         // 5.request
         // http://localhost:1234/tema/chapterNumber
@@ -66,7 +66,7 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet4.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet4.xsl");
 
         // 6 request.
         // http://localhost:1234/tema/authorName/Jeff%20Keller
@@ -74,6 +74,6 @@ public class REST extends RouteBuilder {
                 .produces(TEXT_HTML)
                 .route()
                 .process(PROCESSOR)
-                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\NewStylesheet5.xsl");
+                .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\NewStylesheet5.xsl");
     }
 }
diff --git a/src/main/java/com/example/demo/DemoApplication.java b/src/main/java/com/library_project/SpringBootWebApplication.java
similarity index 51%
rename from src/main/java/com/example/demo/DemoApplication.java
rename to src/main/java/com/library_project/SpringBootWebApplication.java
index 103d0ef..f503aa2 100644
--- a/src/main/java/com/example/demo/DemoApplication.java
+++ b/src/main/java/com/library_project/SpringBootWebApplication.java
@@ -1,4 +1,4 @@
-package com.example.demo;
+package com.library_project;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -6,15 +6,16 @@ import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
 @SpringBootApplication
-public class DemoApplication {
+public class SpringBootWebApplication {
 
-	public static void main(String[] args) {
+    public static void main(String[] args) throws Exception {
+        SpringApplication.run(SpringBootWebApplication.class, args);
 
-		SpringApplication.run(DemoApplication.class, args);
-        ApplicationContext context = new ClassPathXmlApplicationContext("configDemoManager");
-		DemoManager  obj = (DemoManager) context.getBean("demoService");
+        ApplicationContext context = new ClassPathXmlApplicationContext("Config.xml");
+        DemoManager obj = (DemoManager) context.getBean("DemoMangerBean");
 
+        obj.start();
 
-	}
+    }
 
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/example/demo/Utils.java b/src/main/java/com/library_project/Utils.java
similarity index 87%
rename from src/main/java/com/example/demo/Utils.java
rename to src/main/java/com/library_project/Utils.java
index 91cf393..4583057 100644
--- a/src/main/java/com/example/demo/Utils.java
+++ b/src/main/java/com/library_project/Utils.java
@@ -1,4 +1,4 @@
-package com.example.demo;
+package com.library_project;
 import java.io.FileInputStream;
 import java.io.InputStream;
 
@@ -11,7 +11,7 @@ import org.apache.camel.main.Main;
 
 public class Utils {
 
-    public static final String FILE = "C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\resources\\library.xml";
+    public static final String FILE = "C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\resources\\library.xml";
 
     public void withXSLT() throws Exception {
         final CamelContext camelContext = new DefaultCamelContext();
@@ -38,7 +38,7 @@ public class Utils {
         @Override
         public void configure() throws Exception {
             from("direct:start")
-                    .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\demo\\src\\main\\java\\com\\example\\demo\\xsl_library.xsl")
+                    .to("xslt:file:C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\java\\com\\library_project\\xsl_library.xsl")
                     .to("stream:out");
         }
 
diff --git a/src/main/java/com/library_project/config/SwaggerConfig.java b/src/main/java/com/library_project/config/SwaggerConfig.java
new file mode 100644
index 0000000..f873275
--- /dev/null
+++ b/src/main/java/com/library_project/config/SwaggerConfig.java
@@ -0,0 +1,43 @@
+package com.library_project.config;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import springfox.documentation.builders.RequestHandlerSelectors;
+import springfox.documentation.service.ApiInfo;
+import springfox.documentation.service.Contact;
+import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spring.web.plugins.Docket;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
+
+import static springfox.documentation.builders.PathSelectors.regex;
+
+@EnableSwagger2
+@Configuration
+public class SwaggerConfig {
+
+
+    @Bean
+    public Docket productApi() {
+        return new Docket(DocumentationType.SWAGGER_2)
+                .select()
+                .apis(RequestHandlerSelectors.basePackage("com.library_project"))
+                .paths(regex("/rest.*"))
+                .build()
+                .apiInfo(metaInfo());
+    }
+
+    private ApiInfo metaInfo() {
+
+        ApiInfo apiInfo = new ApiInfo(
+                "Spring Boot Swagger Example API",
+                "Spring Boot Swagger",
+                "1.0",
+                "Terms of Service",
+                "",
+                "",
+                ""
+        );
+
+        return apiInfo;
+    }
+}
diff --git a/src/main/java/com/library_project/config/WebServiceConfig.java b/src/main/java/com/library_project/config/WebServiceConfig.java
new file mode 100644
index 0000000..14e3346
--- /dev/null
+++ b/src/main/java/com/library_project/config/WebServiceConfig.java
@@ -0,0 +1,56 @@
+package com.library_project.config;
+
+import org.springframework.boot.web.servlet.ServletRegistrationBean;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.ws.config.annotation.EnableWs;
+import org.springframework.ws.config.annotation.WsConfigurerAdapter;
+import org.springframework.ws.transport.http.MessageDispatcherServlet;
+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;
+import org.springframework.xml.xsd.SimpleXsdSchema;
+import org.springframework.xml.xsd.XsdSchema;
+
+@EnableWs
+@Configuration
+public class WebServiceConfig extends WsConfigurerAdapter {
+
+    @Bean
+    public ServletRegistrationBean messageDispatcherServlet(ApplicationContext applicationContext) {
+        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
+        servlet.setApplicationContext(applicationContext);
+        servlet.setTransformWsdlLocations(true);
+        return new ServletRegistrationBean(servlet, "/ws/*");
+    }
+
+    @Bean(name = "employees")
+    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema empSchema) {
+        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
+        wsdl11Definition.setPortTypeName("EmployeePort");
+        wsdl11Definition.setLocationUri("/ws");
+        wsdl11Definition.setTargetNamespace("http://part2.com/models/soap/emp");
+        wsdl11Definition.setSchema(empSchema);
+        return wsdl11Definition;
+    }
+
+    @Bean
+    public XsdSchema empSchema() {
+        return new SimpleXsdSchema(new ClassPathResource("employees.xsd"));
+    }
+
+    @Bean(name = "user")
+    public DefaultWsdl11Definition webservice2Wsdl11Definition(XsdSchema empSchemaUser) {
+        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
+        wsdl11Definition.setPortTypeName("EmployeePort");
+        wsdl11Definition.setLocationUri("/ws/user");
+        wsdl11Definition.setTargetNamespace("http://part2.com/models/soap/user");
+        wsdl11Definition.setSchema(empSchemaUser);
+        return wsdl11Definition;
+    }
+
+    @Bean
+    public XsdSchema empSchemaUser() {
+        return new SimpleXsdSchema(new ClassPathResource("user.xsd"));
+    }
+}
diff --git a/src/main/java/com/library_project/controller/IndexController.java b/src/main/java/com/library_project/controller/IndexController.java
new file mode 100644
index 0000000..1729885
--- /dev/null
+++ b/src/main/java/com/library_project/controller/IndexController.java
@@ -0,0 +1,18 @@
+package com.library_project.controller;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.GetMapping;
+
+@Controller
+public class IndexController {
+
+    private final Logger logger = LoggerFactory.getLogger(IndexController.class);
+
+    @GetMapping("/")
+    public String index() {
+        return "ajax";
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/library_project/controller/SearchController.java b/src/main/java/com/library_project/controller/SearchController.java
new file mode 100644
index 0000000..25aca50
--- /dev/null
+++ b/src/main/java/com/library_project/controller/SearchController.java
@@ -0,0 +1,242 @@
+package com.library_project.controller;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.library_project.model.*;
+import com.library_project.services.AuthorService;
+import com.library_project.services.BookService;
+import com.library_project.services.UserService;
+import org.apache.camel.json.simple.JsonObject;
+import org.json.JSONObject;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.validation.Errors;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+@RestController
+public class SearchController {
+
+    UserService userService;
+    BookService bookService;
+    AuthorService authorService;
+
+    @Autowired
+    public void setUserService(UserService userService) {
+        this.userService = userService;
+    }
+
+    @Autowired
+    public void setBookService(BookService bookService) {
+        this.bookService = bookService;
+    }
+
+    @Autowired
+    public void setAuthorService(AuthorService authorService){this.authorService = authorService;}
+
+    // *********** user requests ***********
+    @PostMapping("/api/search")
+    public ResponseEntity<?> getSearchResultViaAjax(@Valid @RequestBody SearchCriteria search, Errors errors) {
+
+        AjaxResponseBody<User> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+
+        }
+
+        List<User> users = userService.findByUserNameOrEmail(search.getUsername());
+        if (users.isEmpty()) {
+            result.setMsg("no user found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(users);
+
+        return ResponseEntity.ok(result);
+
+    }
+
+
+    // *********** book requests ***********
+    @PostMapping("/api/search-book")
+    public ResponseEntity<?> getSearchResultViaAjax1Response(@Valid @RequestBody SearchCriteria search, Errors errors) {
+
+        AjaxResponseBody<Book> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+
+        }
+
+        List<Book> books = bookService.findBookByName(search.getBookTitle());
+        if (books.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(books);
+
+        return ResponseEntity.ok(result);
+
+    }
+
+
+    @PostMapping("/api/search-book-titles-that-start-with")
+    public ResponseEntity<?> getSearchResultViaAjax2Response(@Valid @RequestBody SearchCriteria search, Errors errors) {
+
+        AjaxResponseBody<BookChaptersModel> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+        }
+
+        List<BookChaptersModel> books = bookService.getBookThatStartWith(search.getBookTitlesThatStartWith());
+        if (books.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(books);
+
+        return ResponseEntity.ok(result);
+
+    }
+
+
+    // *********** author requests ***********
+    @PostMapping("/api/search-authors")
+    public ResponseEntity<?> getSearchResultViaAjax5Response(@Valid @RequestBody SearchCriteria search, Errors errors)  {
+
+        AjaxResponseBody<Author> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+        }
+
+        Set<Author> authors = authorService.getAllAuthors();
+        if (authors.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(authors.stream().collect(Collectors.toList()));
+
+        return ResponseEntity.ok(result);
+
+    }
+
+    //e.g year: 2010
+    @PostMapping("/api/search-authors-filtered-by-copyrightYear")
+    public ResponseEntity<?> getSearchResultViaAjax3Response(@Valid @RequestBody SearchCriteria search, Errors errors) {
+
+        AjaxResponseBody<BookAuthorsFilteredByCopyRightYear> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+        }
+
+        Set<BookAuthorsFilteredByCopyRightYear> books = authorService.getBookAuthorsFilteredByCopyRightYear(Integer.parseInt(search.getAuthorsFilteredByCopyrightYear()));
+        if (books.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(books.stream().collect(Collectors.toList()));
+
+        return ResponseEntity.ok(result);
+
+    }
+
+    //e.g {"publisher": "Wiley-IEEE Press","authorName": "Richard"}
+    @PostMapping("/api/search-authors-filtered-by-publisher-and-name")
+    public ResponseEntity<?> getSearchResultViaAjax4Response(@Valid @RequestBody SearchCriteria search, Errors errors)  {
+
+        AjaxResponseBody<BookAuthorsFilteredByPublisher> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+        }
+
+        ObjectMapper objectMapper = new ObjectMapper();
+        Request1Ajax r1Ajax = null;
+        try {
+            r1Ajax = objectMapper.readValue(search.getAuthorsFilteredByPublisherAndName(), Request1Ajax.class);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        Set<BookAuthorsFilteredByPublisher> authors = authorService.getBookAuthorsFilteredByPublisherAndAuthorName(r1Ajax.getPublisher(), r1Ajax.getAuthorName());
+        if (authors.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(authors.stream().collect(Collectors.toList()));
+
+        return ResponseEntity.ok(result);
+
+    }
+
+
+    // *********** booked book requests ***********
+    @PostMapping("/api/add-booked-book")
+    public ResponseEntity<?> getSearchResultViaAjax6Response(@Valid @RequestBody SearchCriteria search, Errors errors)  {
+
+        AjaxResponseBody<BookedBook> result = new AjaxResponseBody();
+
+        //If error, just return a 400 bad request, along with the error message
+        if (errors.hasErrors()) {
+
+            result.setMsg(errors.getAllErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.joining(",")));
+            return ResponseEntity.badRequest().body(result);
+        }
+
+        ObjectMapper objectMapper = new ObjectMapper();
+        BookedBook bookedBook = null;
+        try {
+            bookedBook = objectMapper.readValue(search.getBookedBook(), BookedBook.class);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        bookService.addBook(bookedBook);
+
+        List<BookedBook> bookedBooks = new ArrayList<>();
+        bookedBooks.add(bookedBook);
+
+        if (bookedBooks.isEmpty()) {
+            result.setMsg("no book found!");
+        } else {
+            result.setMsg("success");
+        }
+        result.setResult(bookedBooks.stream().collect(Collectors.toList()));
+
+        return ResponseEntity.ok(result);
+
+    }
+
+}
diff --git a/src/main/java/com/library_project/endpoints/EmployeeEndpoint.java b/src/main/java/com/library_project/endpoints/EmployeeEndpoint.java
new file mode 100644
index 0000000..4d9cefe
--- /dev/null
+++ b/src/main/java/com/library_project/endpoints/EmployeeEndpoint.java
@@ -0,0 +1,32 @@
+package com.library_project.endpoints;
+
+import com.part2.models.soap.emp.GetEmployeeRequest;
+import com.part2.models.soap.emp.GetEmployeeResponse;
+
+import com.library_project.repository.EmployeeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.ws.server.endpoint.annotation.Endpoint;
+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
+import org.springframework.ws.server.endpoint.annotation.RequestPayload;
+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;
+
+@Endpoint
+public class EmployeeEndpoint {
+    private static final String NAMESPACE_URI = "http://part2.com/models/soap/emp";
+
+    private EmployeeRepository empRepository;
+
+    @Autowired
+    public EmployeeEndpoint(EmployeeRepository empRepository) {
+        this.empRepository = empRepository;
+    }
+
+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getEmployeeRequest")
+    @ResponsePayload
+    public GetEmployeeResponse getEmployee(@RequestPayload GetEmployeeRequest request) {
+        GetEmployeeResponse response = new GetEmployeeResponse();
+        response.setEmployee(empRepository.findEmployee(request.getId()));
+
+        return response;
+    }
+}
diff --git a/src/main/java/com/library_project/endpoints/UserEndpoint.java b/src/main/java/com/library_project/endpoints/UserEndpoint.java
new file mode 100644
index 0000000..0ca411c
--- /dev/null
+++ b/src/main/java/com/library_project/endpoints/UserEndpoint.java
@@ -0,0 +1,31 @@
+package com.library_project.endpoints;
+
+import com.part2.models.soap.user.GetUserRequest;
+import com.part2.models.soap.user.GetUserResponse;
+import com.library_project.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.ws.server.endpoint.annotation.Endpoint;
+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
+import org.springframework.ws.server.endpoint.annotation.RequestPayload;
+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;
+
+@Endpoint
+public class UserEndpoint {
+    private static final String NAMESPACE_URI = "http://part2.com/models/soap/user";
+
+    private UserRepository userRepository;
+
+    @Autowired
+    public UserEndpoint(UserRepository userRepository) {
+        this.userRepository = userRepository;
+    }
+
+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = "getUserRequest")
+    @ResponsePayload
+    public GetUserResponse getUser(@RequestPayload GetUserRequest request) {
+        GetUserResponse response = new GetUserResponse();
+        response.setUser(userRepository.findUser(request.getId()));
+        return response;
+    }
+}
+
diff --git a/src/main/java/com/library_project/model/AjaxResponseBody.java b/src/main/java/com/library_project/model/AjaxResponseBody.java
new file mode 100644
index 0000000..87ba642
--- /dev/null
+++ b/src/main/java/com/library_project/model/AjaxResponseBody.java
@@ -0,0 +1,25 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class AjaxResponseBody<T> {
+
+    String msg;
+    List<T> result;
+
+    public String getMsg() {
+        return msg;
+    }
+
+    public void setMsg(String msg) {
+        this.msg = msg;
+    }
+
+    public List<T> getResult() {
+        return result;
+    }
+
+    public void setResult(List<T> result) {
+        this.result = result;
+    }
+}
diff --git a/src/main/java/com/library_project/model/Author.java b/src/main/java/com/library_project/model/Author.java
new file mode 100644
index 0000000..28c8754
--- /dev/null
+++ b/src/main/java/com/library_project/model/Author.java
@@ -0,0 +1,22 @@
+package com.library_project.model;
+
+public class Author {
+    private String id;
+    private String name;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
diff --git a/src/main/java/com/library_project/model/Book.java b/src/main/java/com/library_project/model/Book.java
new file mode 100644
index 0000000..b5d6dae
--- /dev/null
+++ b/src/main/java/com/library_project/model/Book.java
@@ -0,0 +1,88 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class Book {
+
+    private String publisher;
+    private String title;
+    private int copyrightYear;
+    private String subject;
+    private String isbn;
+    private Float price;
+    private List<String> authors;
+    private List<Chapter> chapters;
+    private List<Section> sections;
+
+    public List<Chapter> getChapters() {
+        return chapters;
+    }
+
+    public void setChapters(List<Chapter> chapters) {
+        this.chapters = chapters;
+    }
+
+    public String getPublisher() {
+        return publisher;
+    }
+
+    public void setPublisher(String publisher) {
+        this.publisher = publisher;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public int getCopyrightYear() {
+        return copyrightYear;
+    }
+
+    public void setCopyrightYear(int copyrightYear) {
+        this.copyrightYear = copyrightYear;
+    }
+
+    public String getSubject() {
+        return subject;
+    }
+
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
+
+    public String getIsbn() {
+        return isbn;
+    }
+
+    public void setIsbn(String isbn) {
+        this.isbn = isbn;
+    }
+
+    public Float getPrice() {
+        return price;
+    }
+
+    public void setPrice(Float price) {
+        this.price = price;
+    }
+
+    public List<String> getAuthors() {
+        return authors;
+    }
+
+    public void setAuthors(List<String> authors) {
+        this.authors = authors;
+    }
+
+    public List<Section> getSections() {
+        return sections;
+    }
+
+    public void setSections(List<Section> sections) {
+        this.sections = sections;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookAuthorModel.java b/src/main/java/com/library_project/model/BookAuthorModel.java
new file mode 100644
index 0000000..9d8382a
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookAuthorModel.java
@@ -0,0 +1,25 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class BookAuthorModel {
+
+    private List<Author> author;
+    private String Title;
+
+    public List<Author> getAuthor() {
+        return author;
+    }
+
+    public void setAuthor(List<Author> author) {
+        this.author = author;
+    }
+
+    public String getTitle() {
+        return Title;
+    }
+
+    public void setTitle(String title) {
+        Title = title;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookAuthorsFilteredByCopyRightYear.java b/src/main/java/com/library_project/model/BookAuthorsFilteredByCopyRightYear.java
new file mode 100644
index 0000000..e91f9ce
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookAuthorsFilteredByCopyRightYear.java
@@ -0,0 +1,15 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class BookAuthorsFilteredByCopyRightYear extends  BookAuthorModel{
+    private int year;
+
+    public int getYear() {
+        return year;
+    }
+
+    public void setYear(int year) {
+        this.year = year;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookAuthorsFilteredByPublisher.java b/src/main/java/com/library_project/model/BookAuthorsFilteredByPublisher.java
new file mode 100644
index 0000000..35529ed
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookAuthorsFilteredByPublisher.java
@@ -0,0 +1,14 @@
+package com.library_project.model;
+
+public class BookAuthorsFilteredByPublisher extends BookAuthorModel{
+
+    private String publisher;
+
+    public String getPublisher() {
+        return publisher;
+    }
+
+    public void setPublisher(String publisher) {
+        this.publisher = publisher;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookChaptersFilteredByAuthorName.java b/src/main/java/com/library_project/model/BookChaptersFilteredByAuthorName.java
new file mode 100644
index 0000000..f32d832
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookChaptersFilteredByAuthorName.java
@@ -0,0 +1,13 @@
+package com.library_project.model;
+
+public class BookChaptersFilteredByAuthorName extends BookChaptersModel{
+    private Author author;
+
+    public Author getAuthor() {
+        return author;
+    }
+
+    public void setAuthor(Author author) {
+        this.author = author;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookChaptersModel.java b/src/main/java/com/library_project/model/BookChaptersModel.java
new file mode 100644
index 0000000..7a8135c
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookChaptersModel.java
@@ -0,0 +1,25 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class BookChaptersModel extends BookModel{
+
+    private List<String> authors;
+    private List<Chapter> chapters;
+
+    public List<Chapter> getChapters() {
+        return chapters;
+    }
+
+    public void setChapters(List<Chapter> chapters) {
+        this.chapters = chapters;
+    }
+
+    public List<String> getAuthors() {
+        return authors;
+    }
+
+    public void setAuthors(List<String> authors) {
+        this.authors = authors;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookModel.java b/src/main/java/com/library_project/model/BookModel.java
new file mode 100644
index 0000000..f3fa80c
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookModel.java
@@ -0,0 +1,22 @@
+package com.library_project.model;
+
+public class BookModel {
+    private String title;
+    private String subject;
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getSubject() {
+        return subject;
+    }
+
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookSectionsModel.java b/src/main/java/com/library_project/model/BookSectionsModel.java
new file mode 100644
index 0000000..ff45ad3
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookSectionsModel.java
@@ -0,0 +1,34 @@
+package com.library_project.model;
+
+import java.util.List;
+
+public class BookSectionsModel extends BookModel{
+    private List<String> authors;
+    private List<Section> sections;
+
+    private int numberOfSections;
+
+    public List<String> getAuthors() {
+        return authors;
+    }
+
+    public void setAuthors(List<String> authors) {
+        this.authors = authors;
+    }
+
+    public List<Section> getSections() {
+        return sections;
+    }
+
+    public void setSections(List<Section> sections) {
+        this.sections = sections;
+    }
+
+    public int getNumberOfSections() {
+        return numberOfSections;
+    }
+
+    public void setNumberOfSections(int numberOfSections) {
+        this.numberOfSections = numberOfSections;
+    }
+}
diff --git a/src/main/java/com/library_project/model/BookedBook.java b/src/main/java/com/library_project/model/BookedBook.java
new file mode 100644
index 0000000..cbfcb5f
--- /dev/null
+++ b/src/main/java/com/library_project/model/BookedBook.java
@@ -0,0 +1,30 @@
+package com.library_project.model;
+
+public class BookedBook {
+    private String title;
+    private String userId;
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    @Override
+    public String toString() {
+        return "BookedBook{" +
+                "title='" + title + '\'' +
+                ", userId='" + userId + '\'' +
+                '}';
+    }
+}
diff --git a/src/main/java/com/library_project/model/Chapter.java b/src/main/java/com/library_project/model/Chapter.java
new file mode 100644
index 0000000..4dcd703
--- /dev/null
+++ b/src/main/java/com/library_project/model/Chapter.java
@@ -0,0 +1,33 @@
+package com.library_project.model;
+
+public class Chapter {
+    private String name;
+    private String pageNumber;
+    private int chapterNumber;
+
+    public Chapter() {}
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getPageNumber() {
+        return pageNumber;
+    }
+
+    public void setPageNumber(String pageNumber) {
+        this.pageNumber = pageNumber;
+    }
+
+    public int getChapterNumber() {
+        return chapterNumber;
+    }
+
+    public void setChapterNumber(int chapterNumber) {
+        this.chapterNumber = chapterNumber;
+    }
+}
diff --git a/src/main/java/com/library_project/model/Request1Ajax.java b/src/main/java/com/library_project/model/Request1Ajax.java
new file mode 100644
index 0000000..f3102cf
--- /dev/null
+++ b/src/main/java/com/library_project/model/Request1Ajax.java
@@ -0,0 +1,26 @@
+package com.library_project.model;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class Request1Ajax {
+    private String publisher;
+    private String authorName;
+
+
+    public String getPublisher() {
+        return publisher;
+    }
+
+    public void setPublisher(String publisher) {
+        this.publisher = publisher;
+    }
+
+    public String getAuthorName() {
+        return authorName;
+    }
+
+    public void setAuthorName(String authorName) {
+        this.authorName = authorName;
+    }
+}
diff --git a/src/main/java/com/library_project/model/SearchCriteria.java b/src/main/java/com/library_project/model/SearchCriteria.java
new file mode 100644
index 0000000..ad027a4
--- /dev/null
+++ b/src/main/java/com/library_project/model/SearchCriteria.java
@@ -0,0 +1,75 @@
+package com.library_project.model;
+
+import org.hibernate.validator.constraints.NotBlank;
+
+public class SearchCriteria {
+
+    //@NotBlank(message = "username can't be empty!")
+    //users
+    String username;
+
+    //books
+    String bookTitle;
+    String bookTitlesThatStartWith;
+
+    //authors
+    String authors;
+    String authorsFilteredByCopyrightYear;
+    String authorsFilteredByPublisherAndName;
+
+    String bookedBook;
+
+    public String getUsername() {
+        return username;
+    }
+
+    public String getBookTitle() {
+        return bookTitle;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setBookTitle(String bookTitle){ this.bookTitle = bookTitle;}
+
+    public String getBookTitlesThatStartWith() {
+        return bookTitlesThatStartWith;
+    }
+
+    public void setBookTitlesThatStartWith(String bookTitlesThatStartWith) {
+        this.bookTitlesThatStartWith = bookTitlesThatStartWith;
+    }
+
+    public String getAuthors() {
+        return authors;
+    }
+
+    public void setAuthors(String authors) {
+        this.authors = authors;
+    }
+
+    public String getAuthorsFilteredByCopyrightYear() {
+        return authorsFilteredByCopyrightYear;
+    }
+
+    public void setAuthorsFilteredByCopyrightYear(String authorsFilteredByCopyrightYear) {
+        this.authorsFilteredByCopyrightYear = authorsFilteredByCopyrightYear;
+    }
+
+    public String getAuthorsFilteredByPublisherAndName() {
+        return authorsFilteredByPublisherAndName;
+    }
+
+    public void setAuthorsFilteredByPublisherAndName(String authorsFilteredByPublisherAndName) {
+        this.authorsFilteredByPublisherAndName = authorsFilteredByPublisherAndName;
+    }
+
+    public String getBookedBook() {
+        return bookedBook;
+    }
+
+    public void setBookedBook(String bookedBook) {
+        this.bookedBook = bookedBook;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/library_project/model/Section.java b/src/main/java/com/library_project/model/Section.java
new file mode 100644
index 0000000..915b498
--- /dev/null
+++ b/src/main/java/com/library_project/model/Section.java
@@ -0,0 +1,22 @@
+package com.library_project.model;
+
+public class Section {
+    private String name;
+    private String pageNumber;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getPageNumber() {
+        return pageNumber;
+    }
+
+    public void setPageNumber(String pageNumber) {
+        this.pageNumber = pageNumber;
+    }
+}
diff --git a/src/main/java/com/library_project/model/User.java b/src/main/java/com/library_project/model/User.java
new file mode 100644
index 0000000..1e24bec
--- /dev/null
+++ b/src/main/java/com/library_project/model/User.java
@@ -0,0 +1,61 @@
+package com.library_project.model;
+
+import com.library_project.utils.Common;
+
+public class User {
+    private String id;
+    private String user_name;
+    private String user_password;
+    private String user_email;
+
+//    public User(String username, String password, String email, String id) {
+//        this.user_name = username;
+//        this.user_password = password;
+//        this.user_email = email;
+//        this.id = "user_" + Common.getRandomNumber();
+//    }
+
+    public User(){}
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "username='" + user_name + '\'' +
+                ", password='" + user_password + '\'' +
+                ", email='" + user_email + '\'' +
+                ", id='" + id + '\'' +
+                '}';
+    }
+
+    public String getUsername() {
+        return user_name;
+    }
+
+    public void setUsername(String username) {
+        this.user_name = username;
+    }
+
+    public String getPassword() {
+        return user_password;
+    }
+
+    public void setPassword(String password) {
+        this.user_password = password;
+    }
+
+    public String getEmail() {
+        return user_email;
+    }
+
+    public void setEmail(String email) {
+        this.user_email = email;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+}
diff --git a/src/main/java/com/library_project/repository/EmployeeRepository.java b/src/main/java/com/library_project/repository/EmployeeRepository.java
new file mode 100644
index 0000000..8ccb0c2
--- /dev/null
+++ b/src/main/java/com/library_project/repository/EmployeeRepository.java
@@ -0,0 +1,32 @@
+package com.library_project.repository;
+
+import com.part2.models.soap.emp.Employee;
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by Innova on 02-10-2017.
+ */
+@Component
+public class EmployeeRepository {
+
+    private static final Map<Integer, Employee> emps = new HashMap<>();
+
+    @PostConstruct
+    public void init(){
+        Employee emp1 = new Employee();
+        emp1.setId(1);
+        emp1.setUsername("Suzi");
+        emp1.setUserPassword("password");
+        emp1.setUserEmail("suzi@com.innova.com");
+        emps.put(emp1.getId(), emp1);
+    }
+
+    public Employee findEmployee(int id){
+        return emps.get(id);
+    }
+}
+
diff --git a/src/main/java/com/library_project/repository/UserRepository.java b/src/main/java/com/library_project/repository/UserRepository.java
new file mode 100644
index 0000000..2fa6a9c
--- /dev/null
+++ b/src/main/java/com/library_project/repository/UserRepository.java
@@ -0,0 +1,33 @@
+package com.library_project.repository;
+
+import com.part2.models.soap.user.User;
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by Innova on 02-10-2017.
+ */
+@Component
+public class UserRepository {
+
+    private static final Map<Integer, User> emps = new HashMap<>();
+
+    @PostConstruct
+    public void init(){
+        User emp1 = new User();
+        emp1.setId(1);
+        emp1.setUsername("Suzi");
+        emp1.setUserPassword("password");
+        emp1.setUserEmail("suzi@com.innova.com");
+        emps.put(emp1.getId(), emp1);
+    }
+
+    public User findUser(int id){
+        return emps.get(id);
+    }
+}
+
+
diff --git a/src/main/java/com/library_project/resource/AuthorController.java b/src/main/java/com/library_project/resource/AuthorController.java
new file mode 100644
index 0000000..b448908
--- /dev/null
+++ b/src/main/java/com/library_project/resource/AuthorController.java
@@ -0,0 +1,64 @@
+package com.library_project.resource;
+
+import com.library_project.model.Author;
+import com.library_project.model.Book;
+import com.library_project.model.BookAuthorsFilteredByCopyRightYear;
+import com.library_project.model.BookAuthorsFilteredByPublisher;
+import com.library_project.services.AuthorService;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+import java.util.Set;
+
+
+@RestController
+@RequestMapping("/rest/author")
+@Api(value = "Author Resource", description = "shows authors info")
+public class AuthorController {
+
+    @Autowired
+    AuthorService authorService;
+
+    @ApiOperation(value = "Returns authors list")
+    @ApiResponses(
+            value = {
+                    @ApiResponse(code = 100, message = "100 is the message"),
+                    @ApiResponse(code = 200, message = "Successful request")
+            }
+    )
+    @GetMapping("/authors")
+    public Set<Author> getAuthors() {
+        return authorService.getAllAuthors();
+    }
+
+    //e.g authorName: Mark Manson
+    @ApiOperation(value = "Returns author that has the name specified as parameter")
+    @GetMapping("/authorsByName/{authorNameName}")
+    public Author getAuthorByName(@PathVariable("authorNameName") final String authorName) {
+        return authorService.findAuthorsByName(authorName);
+    }
+
+    //e.g year: 2010
+    @ApiOperation(value = "Returns authors that not published on specified year")
+    @GetMapping("/authorsFilteredByCopyrightYear/{year}")
+    public Set<BookAuthorsFilteredByCopyRightYear> authorsFilteredByCopyrightYear(@PathVariable("year") final String year) {
+        return authorService.getBookAuthorsFilteredByCopyRightYear(Integer.parseInt(year));
+    }
+
+    //e.g publisher: Wiley-IEEE Press and word:Richard
+    @ApiOperation(value = "Returns authors by publisher and name author should contains a specific word")
+    @GetMapping("/authors/publisher/{publisher}/authorNameContains/{word}")
+    public Set<BookAuthorsFilteredByPublisher> authorsFilteredByCopyrightYear(
+            @PathVariable("publisher") final String publisher,
+            @PathVariable("word") final String word) {
+        return authorService.getBookAuthorsFilteredByPublisherAndAuthorName(publisher, word);
+    }
+}
diff --git a/src/main/java/com/library_project/resource/BookController.java b/src/main/java/com/library_project/resource/BookController.java
new file mode 100644
index 0000000..0897aec
--- /dev/null
+++ b/src/main/java/com/library_project/resource/BookController.java
@@ -0,0 +1,91 @@
+package com.library_project.resource;
+
+import com.library_project.model.*;
+import com.library_project.services.BookService;
+import com.library_project.utils.DataUtils;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/rest/book")
+@Api(value = "Book Resource", description = "shows books info")
+public class BookController {
+
+    @Autowired
+    BookService bookService;
+
+    @ApiOperation(value = "Returns book list")
+    @ApiResponses(
+            value = {
+                    @ApiResponse(code = 100, message = "100 is the message"),
+                    @ApiResponse(code = 200, message = "Successful request")
+            }
+    )
+    @GetMapping("/books")
+    public List<Book> getBooks() {
+        return bookService.getBookList();
+    }
+
+    //e.g word: A
+    @ApiOperation(value = "Returns books that have title that start with specified word")
+    @GetMapping("/booksTitleStartWith/{word}")
+    public List<BookChaptersModel> getBookThatStartWith(@PathVariable("word") final String word) {
+        return bookService.getBookThatStartWith(word);
+    }
+
+    @ApiOperation(value = "Returns books for author that has coworkers")
+    @GetMapping("/booksWithAuthorThatHasCoworkers")
+    public List<Book> getBookWithAuthorThatHasCoworkers() {
+        return bookService.getBooksWithAuthorThatHasCoworkers();
+    }
+
+    //e.g authorName: Jeff Richard Keller
+    @ApiOperation(value = "Returns chapters by author name")
+    @GetMapping("/chaptersByAuthorName/{authorName}")
+    public List<BookChaptersFilteredByAuthorName> getChaptersByAuthorName(@PathVariable("authorName") final String authorName) {
+        return bookService.getChaptersByAuthorName(authorName);
+    }
+
+    //e.g bookTitle: Cele cinci limbaje ale iubirii
+    @ApiOperation(value = "Returns number of sections filtered by book title")
+    @GetMapping("/sectionsByBookTitle/{bookTitle}")
+    public List<BookSectionsModel> getNumberOfSectionsForABookTitle(@PathVariable("bookTitle") final String bookTitle) {
+        return bookService.getNumberOfSectionsForABookTitle(bookTitle);
+    }
+
+
+    @ApiOperation(value = "Returns number of sections filtered by book title")
+    @GetMapping("/bookedBooks")
+    public List<BookedBook> getAllBookedBooks() {
+        return bookService.getAllBookedBooks();
+    }
+
+
+    @ApiOperation(value = "Create bookedBook")
+    @PostMapping("/bookedBook")
+    public BookedBook create(@RequestBody BookedBook book) {
+        bookService.addBook(book);
+        return book;
+    }
+
+
+    @ApiOperation(value = "Returns the created book")
+    @PostMapping("/createBook")
+    public String createBook(@RequestBody final String hello) {
+        return hello;
+    }
+
+    @ApiOperation(value = "Returns Hello World")
+    @PutMapping("/put")
+    public String helloPut(@RequestBody final String hello) {
+        return hello;
+    }
+}
+
+
diff --git a/src/main/java/com/library_project/resource/UserController.java b/src/main/java/com/library_project/resource/UserController.java
new file mode 100644
index 0000000..02d3b14
--- /dev/null
+++ b/src/main/java/com/library_project/resource/UserController.java
@@ -0,0 +1,75 @@
+package com.library_project.resource;
+
+import com.library_project.model.User;
+import com.library_project.utils.DataUtils;
+import io.swagger.annotations.Api;
+
+import io.swagger.annotations.ApiOperation;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@RestController
+@RequestMapping("/rest/user")
+@Api(value = "User Resource REST Endpoint", description = "Shows the user info")
+public class UserController {
+
+    @ApiOperation(value = "Returns user list")
+    @GetMapping
+    public List<User> getUsers() {
+        List<com.library_project.model.User> users = new ArrayList<>();
+        users = DataUtils.getUsersMethod();
+        return users;
+    }
+
+    @ApiOperation(value = "Search by username")
+    @GetMapping("/{userName}")
+    public List<User> getUser(@PathVariable("userName") final String userName)
+    {
+        List<com.library_project.model.User> users = new ArrayList<>();
+        users = DataUtils.getUsersMethod();
+        return users.stream()
+                    .filter(x -> x.getUsername().equalsIgnoreCase(userName))
+                    .collect(Collectors.toList());
+    }
+
+    @ApiOperation(value = "Create user")
+    @PostMapping("/user")
+    public User create(@RequestBody User newUser) {
+        DataUtils.addUser(newUser);
+        return newUser;
+    }
+
+//    private class User {
+//
+//        @ApiModelProperty(notes = "name of the User")
+//        private String userName;
+//
+//        @ApiModelProperty(notes = "salary of the user")
+//        private Long salary;
+//
+//        public User(String userName, Long salary) {
+//            this.userName = userName;
+//            this.salary = salary;
+//        }
+//
+//        public String getUserName() {
+//            return userName;
+//        }
+//
+//        public void setUserName(String userName) {
+//            this.userName = userName;
+//        }
+//
+//        public Long getSalary() {
+//            return salary;
+//        }
+//
+//        public void setSalary(Long salary) {
+//            this.salary = salary;
+//        }
+//    }
+}
+
diff --git a/src/main/java/com/library_project/services/AuthorService.java b/src/main/java/com/library_project/services/AuthorService.java
new file mode 100644
index 0000000..50b5f9b
--- /dev/null
+++ b/src/main/java/com/library_project/services/AuthorService.java
@@ -0,0 +1,360 @@
+package com.library_project.services;
+
+import com.library_project.model.*;
+import org.springframework.stereotype.Service;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+@Service
+public class AuthorService {
+
+    public Set<Author> getAllAuthors(){
+
+        List<Author> authors = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList authorList = doc.getElementsByTagName("author_data");
+
+
+            for (int i = 0; i < authorList.getLength(); i++) {
+                Author authorObj = new Author();
+                Node node = authorList.item(i);
+                Element author = (Element) node;
+
+                NodeList infos = author.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("id")) {
+                            authorObj.setId(info.getTextContent());
+                        } else if (info.getTagName().equalsIgnoreCase("author_name"))
+                            authorObj.setName(info.getTextContent());
+                    }
+                    authors.add(authorObj);
+                }
+            }
+
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+      return authors.stream().collect(Collectors.toSet());
+    }
+
+    public Author findAuthorsById(String id){
+
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        Author authorObj = new Author();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList authorList = doc.getElementsByTagName("author_data");
+
+            for (int i = 0; i < authorList.getLength(); i++) {
+                authorObj = new Author();
+                Node node = authorList.item(i);
+                Element author = (Element) node;
+
+                String  idValue = "";
+                NodeList infos = author.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("id")) {
+                            {
+                                authorObj.setId(info.getTextContent());
+                                idValue = info.getTextContent();
+                            }
+                        } else if (info.getTagName().equalsIgnoreCase("author_name"))
+                            authorObj.setName(info.getTextContent());
+
+                        if (authorObj.getName() != null && idValue.equalsIgnoreCase(id))
+                           return authorObj;
+                    }
+                }
+            }
+
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return authorObj;
+    }
+
+
+
+    public Author findAuthorsByName(String name){
+
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        Author authorObj = new Author();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList authorList = doc.getElementsByTagName("author_data");
+
+            for (int i = 0; i < authorList.getLength(); i++) {
+                authorObj = new Author();
+                Node node = authorList.item(i);
+                Element author = (Element) node;
+
+                NodeList infos = author.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("id")) {
+                            {
+                                authorObj.setId(info.getTextContent());
+                            }
+                        } else if (info.getTagName().equalsIgnoreCase("author_name"))
+                            authorObj.setName(info.getTextContent());
+
+                        if (authorObj.getName() != null && authorObj.getName().equalsIgnoreCase(name))
+                            return authorObj;
+                    }
+                }
+            }
+
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return authorObj;
+    }
+
+
+    public String findAuthorIdByName(String name){
+
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        Author authorObj = new Author();
+        String id = "";
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList authorList = doc.getElementsByTagName("author_data");
+
+            for (int i = 0; i < authorList.getLength(); i++) {
+                authorObj = new Author();
+                Node node = authorList.item(i);
+                Element author = (Element) node;
+
+                NodeList infos = author.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("id")) {
+                            {
+                                authorObj.setId(info.getTextContent());
+                            }
+                        } else if (info.getTagName().equalsIgnoreCase("author_name"))
+                            authorObj.setName(info.getTextContent());
+
+                        if (authorObj.getName() != null && authorObj.getName().equalsIgnoreCase(name))
+                            id = authorObj.getId();
+                    }
+                }
+            }
+
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return id;
+    }
+
+
+
+    public Set<BookAuthorsFilteredByCopyRightYear> getBookAuthorsFilteredByCopyRightYear(int year) {
+        List<Book> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            int copyrightYear;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                copyrightYear = year;
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                Book bookObj = new Book();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("copyright_year"))
+                        {
+                            bookObj.setCopyrightYear(Integer.parseInt(info.getTextContent()));
+                            copyrightYear = Integer.parseInt(info.getTextContent());
+                        }
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("title"))
+                                bookObj.setTitle(info.getTextContent());
+                            else {
+                                if (info.getTagName().equalsIgnoreCase("authors")) {
+                                    setAuthorsId(info, authors);
+                                }
+                            }
+                            if (copyrightYear != year) {
+                                bookObj.setAuthors(authors);
+                                books.add(bookObj);
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        List<BookAuthorsFilteredByCopyRightYear> bookAuthorsFilteredByCopyRightYear = new ArrayList<>();
+
+        for (Book book: books.stream().collect(Collectors.toSet())){
+            BookAuthorsFilteredByCopyRightYear obj = new BookAuthorsFilteredByCopyRightYear();
+            obj.setYear(book.getCopyrightYear());
+            for (String authorId: book.getAuthors())
+               obj.setAuthor(Arrays.asList(findAuthorsById(authorId)));
+            obj.setTitle(book.getTitle());
+            bookAuthorsFilteredByCopyRightYear.add(obj);
+        }
+
+        return bookAuthorsFilteredByCopyRightYear.stream().collect(Collectors.toSet());
+    }
+
+
+    public Set<BookAuthorsFilteredByPublisher> getBookAuthorsFilteredByPublisherAndAuthorName(String publishParam, String word) {
+        List<Book> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            String publisher;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                publisher = "";
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                Book bookObj = new Book();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("publisher"))
+                        {
+                            bookObj.setPublisher(info.getTextContent());
+                            publisher = info.getTextContent();
+                        }
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("title"))
+                                bookObj.setTitle(info.getTextContent());
+                            else {
+                                if (info.getTagName().equalsIgnoreCase("authors")) {
+                                    setAuthorsId(info, authors);
+                                }
+                            }
+                            if (publisher.equalsIgnoreCase(publishParam)) {
+                                bookObj.setAuthors(authors);
+                                books.add(bookObj);
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        List<BookAuthorsFilteredByPublisher> bookAuthorsFilteredByPublisher = new ArrayList<>();
+
+        for (Book book: books.stream().collect(Collectors.toSet())){
+            BookAuthorsFilteredByPublisher obj = new BookAuthorsFilteredByPublisher();
+            obj.setPublisher(book.getPublisher());
+            for (String authorId: book.getAuthors()) {
+                Author authorTemp = findAuthorsById(authorId);
+                if (authorTemp.getName().contains(word)) {
+                    obj.setAuthor(Arrays.asList(findAuthorsById(authorId)));
+                    obj.setTitle(book.getTitle());
+                    bookAuthorsFilteredByPublisher.add(obj);
+                }
+            }
+        }
+
+        return bookAuthorsFilteredByPublisher.stream().collect(Collectors.toSet());
+    }
+
+
+
+
+
+
+    public void setAuthorsId(Element info, List<String> authors) {
+        NodeList authorNode = info.getChildNodes();
+        for (int k = 0; k < authorNode.getLength(); k++) {
+            Node authorNodeInfo = authorNode.item(k);
+            if (authorNodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                {
+                    Element authorInfo = (Element) authorNodeInfo;
+                    if (authorInfo.getTagName().equalsIgnoreCase("id"))
+                        authors.add(authorInfo.getTextContent());
+                    else if (authorInfo.getTagName().equalsIgnoreCase("coauthors")) {
+                        NodeList authorInfoNode = authorInfo.getChildNodes();
+                        for (int l = 0; l < authorInfoNode.getLength(); l++) {
+                            Node coauthorNode = authorInfoNode.item(l);
+                            if (coauthorNode.getNodeType() == Node.ELEMENT_NODE) {
+                                Element coauthor = (Element) coauthorNode;
+                                if (coauthor.getTagName().equalsIgnoreCase("id"))
+                                    authors.add(coauthor.getTextContent());
+                            }
+                        }
+                    }
+
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/com/library_project/services/BookService.java b/src/main/java/com/library_project/services/BookService.java
new file mode 100644
index 0000000..4a24b70
--- /dev/null
+++ b/src/main/java/com/library_project/services/BookService.java
@@ -0,0 +1,627 @@
+package com.library_project.services;
+
+import com.library_project.model.*;
+import com.sun.org.apache.xerces.internal.dom.DeepNodeListImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.annotation.PostConstruct;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+public class BookService {
+
+    @Autowired
+    AuthorService authorService;
+
+    private List<Book> books;
+
+    public List<Book> findBookByName(String bookName) {
+
+        List<Book> result = getAllBooks()
+                .stream()
+                .filter(x -> x.getTitle().equalsIgnoreCase(bookName))
+                .collect(Collectors.toList());
+        return result;
+
+    }
+
+
+    public List<Book> getBookList() {
+        return getAllBooks();
+    }
+
+    public List<BookChaptersModel>getBookThatStartWith(String booksTitleStartWith) {
+        return getChaptersForBooksThatStartWith().stream()
+                        .filter(x -> x.getTitle()
+                        .startsWith(booksTitleStartWith))
+                        .collect(Collectors.toList());
+    }
+
+    @PostConstruct
+    private void iniDataForTesting() {
+        books = new ArrayList<Book>();
+        getAllBooks();
+    }
+
+    public List<Book> getAllBooks() {
+        List<Book> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            String infoMessage;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                List<Section> sections = new ArrayList<>();
+                Book bookObj = new Book();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("publisher"))
+                            bookObj.setPublisher(info.getTextContent());
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("title"))
+                                bookObj.setTitle(info.getTextContent());
+                            else {
+                                if (info.getTagName().equalsIgnoreCase("authors")) {
+                                    setAuthorsId(info, authors);
+                                } else {
+                                    if (info.getTagName().equalsIgnoreCase("chapters_and_sections")) {
+                                        setChaptersAndSections(info, chapters, sections);
+                                    } else {
+                                        if (info.getTagName().equalsIgnoreCase("copyright_year"))
+                                            bookObj.setCopyrightYear(Integer.parseInt(info.getTextContent()));
+                                        else {
+                                            if (info.getTagName().equalsIgnoreCase("subject"))
+                                                bookObj.setSubject(info.getTextContent());
+                                            else {
+                                                if (info.getTagName().equalsIgnoreCase("isbn"))
+                                                    bookObj.setIsbn(info.getTextContent());
+                                                else {
+                                                    if (info.getTagName().equalsIgnoreCase("price"))
+                                                        bookObj.setPrice(Float.parseFloat(info.getTextContent()));
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+                bookObj.setAuthors(authors);
+                bookObj.setChapters(chapters);
+                bookObj.setSections(sections);
+                books.add(bookObj);
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+    public List<Book> getBooksWithAuthorThatHasCoworkers() {
+        List<Book> books = new ArrayList<>();
+        boolean hasCoworkers;
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            String infoMessage;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                hasCoworkers = false;
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                Book bookObj = new Book();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("publisher"))
+                            bookObj.setPublisher(info.getTextContent());
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("title"))
+                                bookObj.setTitle(info.getTextContent());
+                            else {
+                                if (info.getTagName().equalsIgnoreCase("authors")) {
+                                    if (checkIfAuthorsIdIfAuthorHasCoworkers(info, authors)) {
+                                        hasCoworkers = true;
+                                    }
+                                } else {
+                                    if (info.getTagName().equalsIgnoreCase("chapters_and_sections")) {
+                                        setChapters(info, chapters);
+                                    } else {
+
+                                        if (info.getTagName().equalsIgnoreCase("copyright_year"))
+                                            bookObj.setCopyrightYear(Integer.parseInt(info.getTextContent()));
+                                        else {
+                                            if (info.getTagName().equalsIgnoreCase("subject"))
+                                                bookObj.setSubject(info.getTextContent());
+                                            else {
+                                                if (info.getTagName().equalsIgnoreCase("isbn"))
+                                                    bookObj.setIsbn(info.getTextContent());
+                                                else {
+                                                    if (info.getTagName().equalsIgnoreCase("price"))
+                                                        bookObj.setPrice(Float.parseFloat(info.getTextContent()));
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+                if (hasCoworkers) {
+                    bookObj.setAuthors(authors);
+                    bookObj.setChapters(chapters);
+                    books.add(bookObj);
+                }
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+
+    public List<BookChaptersModel> getChaptersForBooksThatStartWith() {
+        List<BookChaptersModel> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            String infoMessage;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                BookChaptersModel bookObj = new BookChaptersModel();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("title"))
+                            bookObj.setTitle(info.getTextContent());
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("authors")) {
+                                setAuthorsId(info, authors);
+                            } else {
+                                if (info.getTagName().equalsIgnoreCase("chapters_and_sections")) {
+                                    setChapters(info, chapters);
+                                } else {
+                                    if (info.getTagName().equalsIgnoreCase("subject"))
+                                        bookObj.setSubject(info.getTextContent());
+                                }
+                            }
+                        }
+                    }
+                }
+                bookObj.setAuthors(authors);
+                bookObj.setChapters(chapters);
+                books.add(bookObj);
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+    public List<BookChaptersFilteredByAuthorName> getChaptersByAuthorName(String name) {
+        List<BookChaptersFilteredByAuthorName> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+            String infoMessage;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                BookChaptersFilteredByAuthorName bookObj = new BookChaptersFilteredByAuthorName();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("title"))
+                            bookObj.setTitle(info.getTextContent());
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("authors")) {
+                                setAuthorsId(info, authors);
+                            } else {
+                                if (info.getTagName().equalsIgnoreCase("chapters_and_sections")) {
+                                    setChapters(info, chapters);
+                                } else {
+                                    if (info.getTagName().equalsIgnoreCase("subject"))
+                                        bookObj.setSubject(info.getTextContent());
+                                }
+                            }
+                        }
+                    }
+                }
+                boolean ok = false;
+                for (String authorId : authors) {
+                    if (authorId.equalsIgnoreCase(authorService.findAuthorIdByName(name)))
+                        ok = true;
+                }
+                if (ok) {
+                    bookObj.setAuthor(authorService.findAuthorsByName(name));
+                    bookObj.setAuthors(authors);
+                    bookObj.setChapters(chapters);
+                    books.add(bookObj);
+                }
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+    public void setAuthorsId(Element info, List<String> authors) {
+        NodeList authorNode = info.getChildNodes();
+        for (int k = 0; k < authorNode.getLength(); k++) {
+            Node authorNodeInfo = authorNode.item(k);
+            if (authorNodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                {
+                    Element authorInfo = (Element) authorNodeInfo;
+                    if (authorInfo.getTagName().equalsIgnoreCase("id"))
+                        authors.add(authorInfo.getTextContent());
+                    else if (authorInfo.getTagName().equalsIgnoreCase("coauthors")) {
+                        NodeList authorInfoNode = authorInfo.getChildNodes();
+                        for (int l = 0; l < authorInfoNode.getLength(); l++) {
+                            Node coauthorNode = authorInfoNode.item(l);
+                            if (coauthorNode.getNodeType() == Node.ELEMENT_NODE) {
+                                Element coauthor = (Element) coauthorNode;
+                                if (coauthor.getTagName().equalsIgnoreCase("id"))
+                                    authors.add(coauthor.getTextContent());
+                            }
+                        }
+                    }
+
+                }
+            }
+        }
+    }
+
+
+    public List<BookSectionsModel> getNumberOfSectionsForABookTitle(String title) {
+
+        List<BookSectionsModel> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("book");
+
+            //we go through all list because can be possible to have different books with th same title
+            for (int i = 0; i < booksList.getLength(); i++) {
+                List<String> authors = new ArrayList<>();
+                List<Chapter> chapters = new ArrayList<>();
+                List<Section> sections = new ArrayList<>();
+                String titleValue = "";
+                BookSectionsModel bookObj = new BookSectionsModel();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("title")) {
+                            bookObj.setTitle(info.getTextContent());
+                            titleValue = info.getTextContent();
+                        } else {
+                            if (info.getTagName().equalsIgnoreCase("authors")) {
+                                setAuthorsId(info, authors);
+                            } else {
+                                if (info.getTagName().equalsIgnoreCase("subject"))
+                                    bookObj.setSubject(info.getTextContent());
+                                else {
+                                    if (info.getTagName().equalsIgnoreCase("chapters_and_sections"))
+                                        setSections(info, sections);
+                                }
+                            }
+                        }
+                    }
+
+                }
+                if (titleValue.equalsIgnoreCase(title)) {
+                    bookObj.setAuthors(authors);
+                    bookObj.setSections(sections);
+                    bookObj.setNumberOfSections(sections.size());
+                    books.add(bookObj);
+                }
+            }
+        } catch (
+                ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (
+                SAXException e) {
+            e.printStackTrace();
+        } catch (
+                IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+
+    public boolean checkIfAuthorsIdIfAuthorHasCoworkers(Element info, List<String> authors) {
+        boolean hasCoworkers = false;
+        NodeList authorNode = info.getChildNodes();
+        for (int k = 0; k < authorNode.getLength(); k++) {
+            Node authorNodeInfo = authorNode.item(k);
+            if (authorNodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                {
+                    Element authorInfo = (Element) authorNodeInfo;
+                    if (authorInfo.getTagName().equalsIgnoreCase("id"))
+                        authors.add(authorInfo.getTextContent());
+                    else if (authorInfo.getTagName().equalsIgnoreCase("coauthors")) {
+                        NodeList authorInfoNode = authorInfo.getChildNodes();
+                        if (authorInfoNode.getLength() > 0)
+                            hasCoworkers = true;
+                        for (int l = 0; l < authorInfoNode.getLength(); l++) {
+                            Node coauthorNode = authorInfoNode.item(l);
+                            if (coauthorNode.getNodeType() == Node.ELEMENT_NODE) {
+                                Element coauthor = (Element) coauthorNode;
+                                if (coauthor.getTagName().equalsIgnoreCase("id"))
+                                    authors.add(coauthor.getTextContent());
+                            }
+                        }
+                    }
+
+                }
+            }
+        }
+        return hasCoworkers;
+    }
+
+
+    public void setChapters(Element info, List<Chapter> chapters) {
+        NodeList chapterInfoNode = info.getChildNodes();
+        for (int l = 0; l < chapterInfoNode.getLength(); l++) {
+            Chapter c = new Chapter();
+            Node chaptersNode = chapterInfoNode.item(l);
+            if (chaptersNode.getNodeType() == Node.ELEMENT_NODE) {
+                Element chapter = (Element) chaptersNode;
+                if (chapter.getTagName().equalsIgnoreCase("chapter")) {
+                    NodeList chaptersNodeInfo = chapter.getChildNodes();
+                    for (int index = 0; index < chaptersNodeInfo.getLength(); index++) {
+                        Node chapterNode = chaptersNodeInfo.item(index);
+                        if (chapterNode.getNodeType() == Node.ELEMENT_NODE) {
+                            Element chapterElement = (Element) chapterNode;
+                            if (chapterElement.getTagName().equalsIgnoreCase("name"))
+                                c.setName(chapterElement.getTextContent());
+                            if (chapterElement.getTagName().equalsIgnoreCase("pages"))
+                                c.setPageNumber(chapterElement.getTextContent());
+                            if (chapterElement.getTagName().equalsIgnoreCase("number"))
+                                c.setChapterNumber(Integer.parseInt(chapterElement.getTextContent()));
+                        }
+                    }
+                }
+            }
+            //the title should not be null
+            if (c.getName() != null)
+                chapters.add(c);
+        }
+    }
+
+
+    public void setChaptersAndSections(Element info, List<Chapter> chapters, List<Section> sections) {
+        NodeList chapterInfoNode = info.getChildNodes();
+        for (int l = 0; l < chapterInfoNode.getLength(); l++) {
+            Chapter c = new Chapter();
+            Section s = new Section();
+            Node chaptersNode = chapterInfoNode.item(l);
+            if (chaptersNode.getNodeType() == Node.ELEMENT_NODE) {
+                Element element = (Element) chaptersNode;
+                if (element.getTagName().equalsIgnoreCase("chapter")) {
+                    NodeList chaptersNodeInfo = element.getChildNodes();
+                    for (int index = 0; index < chaptersNodeInfo.getLength(); index++) {
+                        Node chapterNode = chaptersNodeInfo.item(index);
+                        if (chapterNode.getNodeType() == Node.ELEMENT_NODE) {
+                            Element chapterElement = (Element) chapterNode;
+                            if (chapterElement.getTagName().equalsIgnoreCase("name"))
+                                c.setName(chapterElement.getTextContent());
+                            if (chapterElement.getTagName().equalsIgnoreCase("pages"))
+                                c.setPageNumber(chapterElement.getTextContent());
+                            if (chapterElement.getTagName().equalsIgnoreCase("number"))
+                                c.setChapterNumber(Integer.parseInt(chapterElement.getTextContent()));
+                        }
+                    }
+                } else if (element.getTagName().equalsIgnoreCase("section")) {
+                    NodeList sectionsNodeInfo = element.getChildNodes();
+                    for (int index = 0; index < sectionsNodeInfo.getLength(); index++) {
+                        Node sectionChildNode = sectionsNodeInfo.item(index);
+                        if (sectionChildNode.getNodeType() == Node.ELEMENT_NODE) {
+                            Element sectionElement = (Element) sectionChildNode;
+                            if (sectionElement.getTagName().equalsIgnoreCase("name"))
+                                s.setName(sectionElement.getTextContent());
+                            if (sectionElement.getTagName().equalsIgnoreCase("pages"))
+                                s.setPageNumber(sectionElement.getTextContent());
+                        }
+                    }
+                }
+            }
+            //the title should not be null
+            if (c.getName() != null)
+                chapters.add(c);
+            if (s.getName() != null) {
+                sections.add(s);
+            }
+        }
+    }
+
+
+    public void setSections(Element info, List<Section> sections) {
+        NodeList chapterInfoNode = info.getChildNodes();
+        for (int l = 0; l < chapterInfoNode.getLength(); l++) {
+            Section c = new Section();
+            Node sectionNode = chapterInfoNode.item(l);
+            if (sectionNode.getNodeType() == Node.ELEMENT_NODE) {
+                Element section = (Element) sectionNode;
+                if (section.getTagName().equalsIgnoreCase("section")) {
+                    NodeList sectionsNodeInfo = section.getChildNodes();
+                    for (int index = 0; index < sectionsNodeInfo.getLength(); index++) {
+                        Node sectionChildNode = sectionsNodeInfo.item(index);
+                        if (sectionChildNode.getNodeType() == Node.ELEMENT_NODE) {
+                            Element sectionElement = (Element) sectionChildNode;
+                            if (sectionElement.getTagName().equalsIgnoreCase("name"))
+                                c.setName(sectionElement.getTextContent());
+                            if (sectionElement.getTagName().equalsIgnoreCase("pages"))
+                                c.setPageNumber(sectionElement.getTextContent());
+                        }
+                    }
+                }
+            }
+            //the title should not be null
+            if (c.getName() != null)
+                sections.add(c);
+        }
+    }
+
+
+    public List<BookedBook> getAllBookedBooks() {
+        List<BookedBook> books = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList booksList = doc.getElementsByTagName("booked_book");
+            String infoMessage;
+            for (int i = 0; i < booksList.getLength(); i++) {
+                BookedBook bookObj = new BookedBook();
+                Node node = booksList.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                NodeList infos = book.getChildNodes();
+                for (int j = 0; j < infos.getLength(); j++) {
+                    Node nodeInfo = infos.item(j);
+                    if (nodeInfo.getNodeType() == Node.ELEMENT_NODE) {
+                        Element info = (Element) nodeInfo;
+                        if (info.getTagName().equalsIgnoreCase("user_id"))
+                            bookObj.setUserId(info.getTextContent());
+                        else {
+                            if (info.getTagName().equalsIgnoreCase("title"))
+                                bookObj.setTitle(info.getTextContent());
+
+                            }
+                        }
+
+                }
+                books.add(bookObj);
+            }
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return books;
+    }
+
+
+
+
+    public void addBook(BookedBook  book) {
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            NodeList books = doc.getElementsByTagName("booked_book");
+
+            Element root = doc.getDocumentElement();
+            NodeList rootElement = doc.getElementsByTagName("booked_book_list");
+
+            Element newUser = rootElement.item(0).getFirstChild().getOwnerDocument().createElement("booked_book");
+
+            Element id = doc.createElement("user_id");
+            id.appendChild(doc.createTextNode(book.getUserId()));
+            newUser.appendChild(id);
+
+            Element title = doc.createElement("title");
+            title.appendChild(doc.createTextNode(book.getTitle()));
+            newUser.appendChild(title);
+
+            rootElement.item(0).appendChild(newUser);
+
+            DOMSource source = new DOMSource(doc);
+
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            StreamResult result = new StreamResult("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\library.xml");
+            transformer.transform(source, result);
+
+
+        } catch (ParserConfigurationException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (SAXException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (TransformerConfigurationException e) {
+            e.printStackTrace();
+        } catch (TransformerException e) {
+            e.printStackTrace();
+        }
+    }
+
+}
diff --git a/src/main/java/com/library_project/services/UserService.java b/src/main/java/com/library_project/services/UserService.java
new file mode 100644
index 0000000..07d921f
--- /dev/null
+++ b/src/main/java/com/library_project/services/UserService.java
@@ -0,0 +1,121 @@
+package com.library_project.services;
+
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.dataformat.xml.XmlMapper;
+import com.library_project.model.User;
+import org.springframework.stereotype.Service;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.annotation.PostConstruct;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+
+@Service
+public class UserService {
+
+    private List<User> users;
+
+    public List<User> findByUserNameOrEmail(String username) {
+
+        List<User> result = users
+                            .stream()
+                            .filter(x -> x.getUsername().equalsIgnoreCase(username))
+                            .collect(Collectors.toList());
+
+        return result;
+
+    }
+    /*public List<User> findByUserNameOrEmail(String username, String email) {
+
+        List<User> result = new ArrayList<User>();
+
+        for (User user : users) {
+
+            if ((!StringUtils.isEmpty(username)) && (!StringUtils.isEmpty(email))) {
+
+                if (username.equals(user.getUsername()) && email.equals(user.getEmail())) {
+                    result.add(user);
+                    continue;
+                } else {
+                    continue;
+                }
+
+            }
+            if (!StringUtils.isEmpty(username)) {
+                if (username.equals(user.getUsername())) {
+                    result.add(user);
+                    continue;
+                }
+            }
+
+            if (!StringUtils.isEmpty(email)) {
+                if (email.equals(user.getEmail())) {
+                    result.add(user);
+                    continue;
+                }
+            }
+
+        }
+
+        return result;
+
+    }*/
+
+    // Init some users for testing
+    @PostConstruct
+    private void iniDataForTesting() {
+        users = new ArrayList<User>();
+        getAllUsers();
+    }
+
+
+    public void getAllUsers() {
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project\\xml_project\\src\\main\\resources\\user.xml");
+            NodeList books = doc.getElementsByTagName("user_data");
+            String infoMessage;
+            for (int i = 0; i < books.getLength(); i++) {
+                Node node = books.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                String name = book.getElementsByTagName("user_name").item(0).getFirstChild().getNodeValue().toString();
+                String pass = book.getElementsByTagName("user_password").item(0).getFirstChild().getNodeValue().toString();
+                String email = book.getElementsByTagName("user_email").item(0).getFirstChild().getNodeValue().toString();
+
+                User user = new User();
+                user.setUsername(name);
+                user.setPassword(pass);
+                user.setEmail(email);
+                user.setId(id);
+
+                users.add(user);
+                System.out.println();
+            }
+        } catch (ParserConfigurationException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (SAXException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+    }
+
+
+}
diff --git a/src/main/java/com/library_project/utils/Common.java b/src/main/java/com/library_project/utils/Common.java
new file mode 100644
index 0000000..699585e
--- /dev/null
+++ b/src/main/java/com/library_project/utils/Common.java
@@ -0,0 +1,26 @@
+package com.library_project.utils;
+
+import java.security.NoSuchAlgorithmException;
+import java.security.NoSuchProviderException;
+import java.security.SecureRandom;
+
+public class Common {
+
+    public static int getRandomNumber(){
+        SecureRandom secureRandomGenerator = null;
+        try {
+            secureRandomGenerator = SecureRandom.getInstance("SHA1PRNG", "SUN");
+
+        // Get 128 random bytes
+        byte[] randomBytes = new byte[128];
+        secureRandomGenerator.nextBytes(randomBytes);
+
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        } catch (NoSuchProviderException e) {
+            e.printStackTrace();
+        }
+        //Get random integer
+        return secureRandomGenerator.nextInt();
+    }
+}
diff --git a/src/main/java/com/library_project/utils/DataUtils.java b/src/main/java/com/library_project/utils/DataUtils.java
new file mode 100644
index 0000000..d254438
--- /dev/null
+++ b/src/main/java/com/library_project/utils/DataUtils.java
@@ -0,0 +1,118 @@
+package com.library_project.utils;
+
+import com.library_project.model.User;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class DataUtils {
+
+    public static List<User> getUsersMethod() {
+        List<com.library_project.model.User> users = new ArrayList<>();
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\user.xml");
+            NodeList books = doc.getElementsByTagName("user_data");
+            String infoMessage;
+            for (int i = 0; i < books.getLength(); i++) {
+                Node node = books.item(i);
+                Element book = (Element) node;
+                String id = book.getAttribute("id");
+                String name = book.getElementsByTagName("user_name").item(0).getFirstChild().getNodeValue().toString();
+                String pass = book.getElementsByTagName("user_password").item(0).getFirstChild().getNodeValue().toString();
+                String email = book.getElementsByTagName("user_email").item(0).getFirstChild().getNodeValue().toString();
+
+                User user = new User();
+                user.setUsername(name);
+                user.setPassword(pass);
+                user.setEmail(email);
+                user.setId(id);
+
+                users.add(user);
+                System.out.println();
+            }
+        } catch (ParserConfigurationException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (SAXException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return users;
+    }
+
+
+    public static void addUser(User user) {
+        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+        try {
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.parse("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\user.xml");
+            NodeList books = doc.getElementsByTagName("user_data");
+
+            Element root = doc.getDocumentElement();
+            NodeList rootElement = doc.getElementsByTagName("user_list");
+
+            Element newUser = rootElement.item(0).getFirstChild().getOwnerDocument().createElement("user_data");
+
+            Element name = doc.createElement("user_name");
+            name.appendChild(doc.createTextNode(user.getUsername()));
+            newUser.appendChild(name);
+
+            Element id = doc.createElement("id");
+            id.appendChild(doc.createTextNode(user.getId()));
+            newUser.appendChild(id);
+
+            Element password = doc.createElement("user_password");
+            password.appendChild(doc.createTextNode(user.getPassword()));
+            newUser.appendChild(password);
+
+            Element email = doc.createElement("user_email");
+            email.appendChild(doc.createTextNode(user.getEmail()));
+            newUser.appendChild(email);
+
+            rootElement.item(0).appendChild(newUser);
+
+            DOMSource source = new DOMSource(doc);
+
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            StreamResult result = new StreamResult("C:\\Users\\Miriam\\Desktop\\XML\\xml_project-v6\\xml_project\\src\\main\\resources\\user.xml");
+            transformer.transform(source, result);
+
+
+        } catch (ParserConfigurationException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (SAXException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        } catch (TransformerConfigurationException e) {
+            e.printStackTrace();
+        } catch (TransformerException e) {
+            e.printStackTrace();
+        }
+    }
+
+}
diff --git a/src/main/java/com/example/demo/xsl_library.xsl b/src/main/java/com/library_project/xsl_library.xsl
similarity index 100%
rename from src/main/java/com/example/demo/xsl_library.xsl
rename to src/main/java/com/library_project/xsl_library.xsl
diff --git a/src/main/java/com/part2/models/soap/emp/Employee.java b/src/main/java/com/part2/models/soap/emp/Employee.java
new file mode 100644
index 0000000..b19f418
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/emp/Employee.java
@@ -0,0 +1,144 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2017.10.02 at 04:07:02 PM IST 
+//
+
+
+package com.part2.models.soap.emp;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for employee complex type.
+ * 
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ * 
+ * <pre>
+ * &lt;complexType name="employee">
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}int"/>
+ *         &lt;element name="firstname" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *         &lt;element name="lastname" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *         &lt;element name="jobtitle" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *         &lt;element name="email" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ * 
+ * 
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "user", propOrder = {
+    "id",
+    "user_name",
+    "user_password",
+    "user_email"
+})
+public class Employee {
+
+    protected int id;
+    @XmlElement(required = true)
+    protected String user_name;
+    @XmlElement(required = true)
+    protected String user_password;
+    @XmlElement(required = true)
+    protected String user_email;
+
+    /**
+     * Gets the value of the id property.
+     * 
+     */
+    public int getId() {
+        return id;
+    }
+
+    /**
+     * Sets the value of the id property.
+     * 
+     */
+    public void setId(int value) {
+        this.id = value;
+    }
+
+    /**
+     * Gets the value of the firstname property.
+     * 
+     * @return
+     *     possible object is
+     *     {@link String }
+     *     
+     */
+    public String getUsername() {
+        return user_name;
+    }
+
+    /**
+     * Sets the value of the firstname property.
+     * 
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *     
+     */
+    public void setUsername(String value) {
+        this.user_name = value;
+    }
+
+    /**
+     * Gets the value of the lastname property.
+     * 
+     * @return
+     *     possible object is
+     *     {@link String }
+     *     
+     */
+    public String getUserPassword() {
+        return user_password;
+    }
+
+    /**
+     * Sets the value of the lastname property.
+     * 
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *     
+     */
+    public void setUserPassword(String value) {
+        this.user_password = value;
+    }
+
+    /**
+     * Gets the value of the jobtitle property.
+     * 
+     * @return
+     *     possible object is
+     *     {@link String }
+     *     
+     */
+    public String getUserEmail() {
+        return user_email;
+    }
+
+    /**
+     * Sets the value of the jobtitle property.
+     * 
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *     
+     */
+    public void setUserEmail(String value) {
+        this.user_email = value;
+    }
+}
diff --git a/src/main/java/com/part2/models/soap/emp/GetEmployeeRequest.java b/src/main/java/com/part2/models/soap/emp/GetEmployeeRequest.java
new file mode 100644
index 0000000..84b6a43
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/emp/GetEmployeeRequest.java
@@ -0,0 +1,61 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2017.10.02 at 04:07:02 PM IST 
+//
+
+
+package com.part2.models.soap.emp;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for anonymous complex type.
+ * 
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ * 
+ * <pre>
+ * &lt;complexType>
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}int"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ * 
+ * 
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "", propOrder = {
+    "id"
+})
+@XmlRootElement(name = "getEmployeeRequest")
+public class GetEmployeeRequest {
+
+    protected int id;
+
+    /**
+     * Gets the value of the id property.
+     * 
+     */
+    public int getId() {
+        return id;
+    }
+
+    /**
+     * Sets the value of the id property.
+     * 
+     */
+    public void setId(int value) {
+        this.id = value;
+    }
+
+}
diff --git a/src/main/java/com/part2/models/soap/emp/GetEmployeeResponse.java b/src/main/java/com/part2/models/soap/emp/GetEmployeeResponse.java
new file mode 100644
index 0000000..c1ebdcf
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/emp/GetEmployeeResponse.java
@@ -0,0 +1,71 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2017.10.02 at 04:07:02 PM IST 
+//
+
+
+package com.part2.models.soap.emp;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for anonymous complex type.
+ * 
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ * 
+ * <pre>
+ * &lt;complexType>
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="employee" type="{http://innova.com/models/soap/emp}employee"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ * 
+ * 
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "", propOrder = {
+    "employee"
+})
+@XmlRootElement(name = "getEmployeeResponse")
+public class GetEmployeeResponse {
+
+    @XmlElement(required = true)
+    protected Employee employee;
+
+    /**
+     * Gets the value of the employee property.
+     * 
+     * @return
+     *     possible object is
+     *     {@link Employee }
+     *     
+     */
+    public Employee getEmployee() {
+        return employee;
+    }
+
+    /**
+     * Sets the value of the employee property.
+     * 
+     * @param value
+     *     allowed object is
+     *     {@link Employee }
+     *     
+     */
+    public void setEmployee(Employee value) {
+        this.employee = value;
+    }
+
+}
diff --git a/src/main/java/com/part2/models/soap/emp/ObjectFactory.java b/src/main/java/com/part2/models/soap/emp/ObjectFactory.java
new file mode 100644
index 0000000..f131a3f
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/emp/ObjectFactory.java
@@ -0,0 +1,63 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2017.10.02 at 04:07:02 PM IST 
+//
+
+
+package com.part2.models.soap.emp;
+
+import javax.xml.bind.annotation.XmlRegistry;
+
+
+/**
+ * This object contains factory methods for each 
+ * Java content interface and Java element interface 
+ * generated in the com.com.innova.models.soap.emp package.
+ * <p>An ObjectFactory allows you to programatically 
+ * construct new instances of the Java representation 
+ * for XML content. The Java representation of XML 
+ * content can consist of schema derived interfaces 
+ * and classes representing the binding of schema 
+ * type definitions, element declarations and model 
+ * groups.  Factory methods for each of these are 
+ * provided in this class.
+ * 
+ */
+@XmlRegistry
+public class ObjectFactory {
+
+
+    /**
+     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.com.innova.models.soap.emp
+     * 
+     */
+    public ObjectFactory() {
+    }
+
+    /**
+     * Create an instance of {@link GetEmployeeRequest }
+     * 
+     */
+    public GetEmployeeRequest createGetEmployeeRequest() {
+        return new GetEmployeeRequest();
+    }
+
+    /**
+     * Create an instance of {@link GetEmployeeResponse }
+     * 
+     */
+    public GetEmployeeResponse createGetEmployeeResponse() {
+        return new GetEmployeeResponse();
+    }
+
+    /**
+     * Create an instance of {@link Employee }
+     * 
+     */
+    public Employee createEmployee() {
+        return new Employee();
+    }
+
+}
diff --git a/src/main/java/com/part2/models/soap/emp/package-info.java b/src/main/java/com/part2/models/soap/emp/package-info.java
new file mode 100644
index 0000000..f783c5e
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/emp/package-info.java
@@ -0,0 +1,9 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2017.10.02 at 04:07:02 PM IST 
+//
+
+@javax.xml.bind.annotation.XmlSchema(namespace = "http://innova.com/models/soap/emp", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
+package com.part2.models.soap.emp;
diff --git a/src/main/java/com/part2/models/soap/user/GetUserRequest.java b/src/main/java/com/part2/models/soap/user/GetUserRequest.java
new file mode 100644
index 0000000..0bb0587
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/user/GetUserRequest.java
@@ -0,0 +1,61 @@
+package com.part2.models.soap.user;
+
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
+// Any modifications to this file will be lost upon recompilation of the source schema.
+// Generated on: 2022.01.01 at 04:07:02 PM IST
+//
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for anonymous complex type.
+ *
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ *
+ * <pre>
+ * &lt;complexType>
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}int"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ *
+ *
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "", propOrder = {
+        "id"
+})
+@XmlRootElement(name = "getUserRequest")
+public class GetUserRequest {
+
+    protected int id;
+
+    /**
+     * Gets the value of the id property.
+     *
+     */
+    public int getId() {
+        return id;
+    }
+
+    /**
+     * Sets the value of the id property.
+     *
+     */
+    public void setId(int value) {
+        this.id = value;
+    }
+
+}
+
diff --git a/src/main/java/com/part2/models/soap/user/GetUserResponse.java b/src/main/java/com/part2/models/soap/user/GetUserResponse.java
new file mode 100644
index 0000000..b61d2c7
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/user/GetUserResponse.java
@@ -0,0 +1,72 @@
+package com.part2.models.soap.user;
+
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
+// Any modifications to this file will be lost upon recompilation of the source schema.
+// Generated on: 2022.01.01 at 04:07:02 PM IST
+//
+
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for anonymous complex type.
+ *
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ *
+ * <pre>
+ * &lt;complexType>
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="user" type="{http://part2.com/models/soap/user}user"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ *
+ *
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "", propOrder = {
+        "user"
+})
+@XmlRootElement(name = "getUserResponse")
+public class GetUserResponse {
+
+    @XmlElement(required = true)
+    protected User user;
+
+    /**
+     * Gets the value of the user property.
+     *
+     * @return
+     *     possible object is
+     *     {@link User }
+     *
+     */
+    public User getUser() {
+        return user;
+    }
+
+    /**
+     * Sets the value of the user property.
+     *
+     * @param value
+     *     allowed object is
+     *     {@link User }
+     *
+     */
+    public void setUser(User value) {
+        this.user = value;
+    }
+
+}
+
diff --git a/src/main/java/com/part2/models/soap/user/ObjectFactory.java b/src/main/java/com/part2/models/soap/user/ObjectFactory.java
new file mode 100644
index 0000000..5fcac0f
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/user/ObjectFactory.java
@@ -0,0 +1,63 @@
+package com.part2.models.soap.user;
+
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
+// Any modifications to this file will be lost upon recompilation of the source schema.
+// Generated on: 2022.01.01 at 04:07:02 PM IST
+//
+
+import javax.xml.bind.annotation.XmlRegistry;
+
+
+/**
+ * This object contains factory methods for each
+ * Java content interface and Java element interface
+ * generated in the com.com.innova.models.soap.emp package.
+ * <p>An ObjectFactory allows you to programatically
+ * construct new instances of the Java representation
+ * for XML content. The Java representation of XML
+ * content can consist of schema derived interfaces
+ * and classes representing the binding of schema
+ * type definitions, element declarations and model
+ * groups.  Factory methods for each of these are
+ * provided in this class.
+ *
+ */
+@XmlRegistry
+public class ObjectFactory {
+
+
+    /**
+     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.com.part2.models.soap.user
+     *
+     */
+    public ObjectFactory() {
+    }
+
+    /**
+     * Create an instance of {@link GetUserRequest }
+     *
+     */
+    public GetUserRequest createGetUserRequest() {
+        return new GetUserRequest();
+    }
+
+    /**
+     * Create an instance of {@link GetUserResponse }
+     *
+     */
+    public GetUserResponse createGetUserResponse() {
+        return new GetUserResponse();
+    }
+
+    /**
+     * Create an instance of {@link User }
+     *
+     */
+    public User createUser() {
+        return new User();
+    }
+
+}
+
diff --git a/src/main/java/com/part2/models/soap/user/User.java b/src/main/java/com/part2/models/soap/user/User.java
new file mode 100644
index 0000000..8eceaef
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/user/User.java
@@ -0,0 +1,144 @@
+package com.part2.models.soap.user;
+
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
+// Any modifications to this file will be lost upon recompilation of the source schema.
+// Generated on: 2022.01.01 at 04:07:02 PM IST
+//
+
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlType;
+
+
+/**
+ * <p>Java class for user complex type.
+ *
+ * <p>The following schema fragment specifies the expected content contained within this class.
+ *
+ * <pre>
+ * &lt;complexType name="user">
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}int"/>
+ *         &lt;element name="user_name" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *         &lt;element name="user_password" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *         &lt;element name="user_email" type="{http://www.w3.org/2001/XMLSchema}string"/>
+ *       &lt;/sequence>
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ *
+ *
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name = "user", propOrder = {
+        "id",
+        "user_name",
+        "user_password",
+        "user_email"
+})
+public class User {
+
+    protected int id;
+    @XmlElement(required = true)
+    protected String user_name;
+    @XmlElement(required = true)
+    protected String user_password;
+    @XmlElement(required = true)
+    protected String user_email;
+
+    /**
+     * Gets the value of the id property.
+     *
+     */
+    public int getId() {
+        return id;
+    }
+
+    /**
+     * Sets the value of the id property.
+     *
+     */
+    public void setId(int value) {
+        this.id = value;
+    }
+
+    /**
+     * Gets the value of the firstname property.
+     *
+     * @return
+     *     possible object is
+     *     {@link String }
+     *
+     */
+    public String getUsername() {
+        return user_name;
+    }
+
+    /**
+     * Sets the value of the username property.
+     *
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *
+     */
+    public void setUsername(String value) {
+        this.user_name = value;
+    }
+
+    /**
+     * Gets the value of the username property.
+     *
+     * @return
+     *     possible object is
+     *     {@link String }
+     *
+     */
+    public String getUserPassword() {
+        return user_password;
+    }
+
+    /**
+     * Sets the value of the password property.
+     *
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *
+     */
+    public void setUserPassword(String value) {
+        this.user_password = value;
+    }
+
+    /**
+     * Gets the value of the password property.
+     *
+     * @return
+     *     possible object is
+     *     {@link String }
+     *
+     */
+    public String getUserEmail() {
+        return user_email;
+    }
+
+    /**
+     * Sets the value of the email property.
+     *
+     * @param value
+     *     allowed object is
+     *     {@link String }
+     *
+     */
+    public void setUserEmail(String value) {
+        this.user_email = value;
+    }
+}
+
diff --git a/src/main/java/com/part2/models/soap/user/package-info.java b/src/main/java/com/part2/models/soap/user/package-info.java
new file mode 100644
index 0000000..f840363
--- /dev/null
+++ b/src/main/java/com/part2/models/soap/user/package-info.java
@@ -0,0 +1,9 @@
+//
+// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
+// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
+// Any modifications to this file will be lost upon recompilation of the source schema. 
+// Generated on: 2022.01.01 at 04:07:02 PM IST
+//
+
+@javax.xml.bind.annotation.XmlSchema(namespace = "http://part2.com/models/soap/user", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
+package com.part2.models.soap.user;
diff --git a/src/main/resources/Config.xml b/src/main/resources/Config.xml
new file mode 100644
index 0000000..8f27d91
--- /dev/null
+++ b/src/main/resources/Config.xml
@@ -0,0 +1,8 @@
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
+
+    <bean id="DemoMangerBean" class="com.library_project.DemoManager">
+    </bean>
+</beans>
\ No newline at end of file
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 8b13789..2338e47 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1 +1 @@
-
+server.port=8088
\ No newline at end of file
diff --git a/src/main/resources/employees.xsd b/src/main/resources/employees.xsd
new file mode 100644
index 0000000..e739836
--- /dev/null
+++ b/src/main/resources/employees.xsd
@@ -0,0 +1,29 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           xmlns:tns="http://innova.com/models/soap/emp"
+           targetNamespace="http://innova.com/models/soap/emp"
+           elementFormDefault="qualified">
+
+    <xs:element name="getEmployeeRequest">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="id" type="xs:int"/>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+
+    <xs:element name="getEmployeeResponse">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="user" type="tns:user"/>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+    <xs:complexType name="user">
+        <xs:sequence>
+            <xs:element name="id" type="xs:int"/>
+            <xs:element name="user_name" type="xs:string"/>
+            <xs:element name="user_password" type="xs:string"/>
+            <xs:element name="user_email" type="xs:string"/>
+        </xs:sequence>
+    </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/src/main/resources/library.xml b/src/main/resources/library.xml
index 1ca7810..38306ef 100644
--- a/src/main/resources/library.xml
+++ b/src/main/resources/library.xml
@@ -1,6 +1,4 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Digital Library -->
-<library>
+<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Digital Library --><library>
     <books>
         <book id="book1">
             <publisher>River Publishers</publisher>
@@ -361,7 +359,7 @@
         </author_data>
         <author_data>
             <id>author_2</id>
-            <author_name>Jeff Keller</author_name>
+            <author_name>Jeff Richard Keller</author_name>
         </author_data>
         <author_data>
             <id>author_3</id>
@@ -369,7 +367,7 @@
         </author_data>
         <author_data>
             <id>author_4</id>
-            <author_name>Markus Zusak</author_name>
+            <author_name>Markus  Richard Zusak</author_name>
         </author_data>
         <author_data>
             <id>author_5</id>
@@ -422,7 +420,17 @@
         </author_data>
         <author_data>
             <id>author_16</id>
-            <author_name>Gary Chapman</author_name>
+            <author_name>Gary Chapman Richard</author_name>
         </author_data>
     </author_list>
+    <booked_book_list>
+        <booked_book>
+            <title>Cele cinci limbaje ale iubirii</title>
+            <user_id>user_2</user_id>
+        </booked_book>
+        <booked_book>
+            <title>Cele cinci limbaje ale iubirii</title>
+            <user_id>user_3</user_id>
+        </booked_book>
+    <booked_book><user_id>user_4</user_id><title>Cele cinci limbaje ale iubirii</title></booked_book><booked_book><user_id>user_5</user_id><title>Cele cinci limbaje ale iubirii</title></booked_book></booked_book_list>
 </library>
\ No newline at end of file
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
new file mode 100644
index 0000000..dbaee3c
--- /dev/null
+++ b/src/main/resources/logback.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <layout class="ch.qos.logback.classic.PatternLayout">
+            <Pattern>
+                %d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
+            </Pattern>
+        </layout>
+    </appender>
+
+    <logger name="org.springframework.web" level="error" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <logger name="com.mkyong" level="debug" additivity="false">
+        <appender-ref ref="STDOUT"/>
+    </logger>
+
+    <root level="error">
+        <appender-ref ref="STDOUT"/>
+    </root>
+
+</configuration>
\ No newline at end of file
diff --git a/src/main/resources/static/js/main.js b/src/main/resources/static/js/main.js
new file mode 100644
index 0000000..37925aa
--- /dev/null
+++ b/src/main/resources/static/js/main.js
@@ -0,0 +1,370 @@
+$(document).ready(function () {
+
+    $("#search-form").submit(function (event) {
+        event.preventDefault();
+
+        fire_ajax_submit();
+    });
+
+
+    $("#search-form-book").submit(function (event) {
+            event.preventDefault();
+
+            fire_ajax_book_submit()
+        });
+
+
+    $("#search-form-book-titles-that-start-with").submit(function (event) {
+                event.preventDefault();
+
+                fire_ajax_book_titles_that_start_with_submit()
+            });
+
+
+    $("#search-form-authors").submit(function (event) {
+                        event.preventDefault();
+
+                        fire_ajax_search_authors_submit()
+                    });
+
+    $("#search-form-authors-filtered-by-copyrightYear").submit(function (event) {
+                    event.preventDefault();
+
+                    fire_ajax_search_authors_filtered_by_copyrightYear_submit()
+                });
+
+
+    $("#search-form-authors-filtered-by-publisher-and-name").submit(function (event) {
+                        event.preventDefault();
+
+                        fire_ajax_search_authors_filtered_by_publisher_and_name_submit()
+                    });
+
+    $("#create-form-booked-book").submit(function (event) {
+                            event.preventDefault();
+
+                            fire_ajax_create_booked_book_submit()
+                        });
+
+
+    $("#search-form-user-wsdl").submit(function (event) {
+                event.preventDefault();
+
+                fire_wsdl_user_submit()
+            });
+});
+
+function fire_ajax_submit() {
+
+    var search = {}
+    search["username"] = $("#username").val();
+    //search["email"] = $("#email").val();
+
+    $("#btn-search").prop("disabled", true);
+
+    $.ajax({
+        type: "POST",
+        contentType: "application/json",
+        url: "/api/search",
+        data: JSON.stringify(search),
+        dataType: 'json',
+        cache: false,
+        timeout: 600000,
+        success: function (data) {
+
+            var json = "<h4>Ajax Response</h4><pre>"
+                + JSON.stringify(data, null, 4) + "</pre>";
+            $('#feedback').html(json);
+
+            console.log("SUCCESS : ", data);
+            $("#btn-search").prop("disabled", false);
+
+        },
+        error: function (e) {
+
+            var json = "<h4>Ajax Response</h4><pre>"
+                + e.responseText + "</pre>";
+            $('#feedback').html(json);
+
+            console.log("ERROR : ", e);
+            $("#btn-search").prop("disabled", false);
+
+        }
+    });
+}
+
+
+    function fire_ajax_book_submit() {
+
+        var search = {}
+        search["bookTitle"] = $("#bookTitle").val();
+
+        $("#btn-search-book").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-book",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#btn-search-book").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#btn-search-book").prop("disabled", false);
+
+            }
+        });
+    }
+
+
+  function fire_ajax_book_titles_that_start_with_submit() {
+
+        var search = {}
+        search["bookTitlesThatStartWith"] = $("#bookTitlesThatStartWith").val();
+
+        $("#bth-search-book-titles-that-start-with").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-book-titles-that-start-with",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#bth-search-book-titles-that-start-with").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#bth-search-book-titles-that-start-with").prop("disabled", false);
+
+            }
+        });
+    }
+
+function fire_ajax_search_authors_submit() {
+
+        var search = {}
+        search["authors"] = $("#authors").val();
+
+        $("#bth-search-authors").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-authors",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#bth-search-authors").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#bth-search-authors").prop("disabled", false);
+
+            }
+        });
+    }
+
+function fire_ajax_search_authors_filtered_by_copyrightYear_submit() {
+
+        var search = {}
+        search["authorsFilteredByCopyrightYear"] = $("#authorsFilteredByCopyrightYear").val();
+
+        $("#bth-search-authors-filtered-by-copyrightYear").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-authors-filtered-by-copyrightYear",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#bth-search-authors-filtered-by-copyrightYear").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#bth-search-authors-filtered-by-copyrightYear").prop("disabled", false);
+
+            }
+        });
+    }
+
+
+
+function fire_ajax_search_authors_filtered_by_publisher_and_name_submit() {
+
+        var search = {}
+        search["authorsFilteredByPublisherAndName"] = $("#authorsFilteredByPublisherAndName").val();
+
+        $("#bth-search-authors-filtered-by-publisher-and-name").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-authors-filtered-by-publisher-and-name",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#bth-search-authors-filtered-by-publisher-and-name").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#bth-search-authors-filtered-by-publisher-and-name").prop("disabled", false);
+
+            }
+        });
+    }
+
+
+function fire_ajax_create_booked_book_submit() {
+
+        var search = {}
+        search["bookedBook"] = $("#bookedBook").val();
+
+        $("#bth-create-booked-book").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/add-booked-book",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#bth-create-booked-book").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#bth-create-booked-book").prop("disabled", false);
+
+            }
+        });
+    }
+
+
+
+
+
+function fire_wsdl_user_submit() {
+
+        var search = {}
+        search["userTitleWSDL"] = $("#userTitleWSDL").val();
+        //search["email"] = $("#email").val();
+
+        $("#btn-search-user-wsdl").prop("disabled", true);
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json",
+            url: "/api/search-user-wsdl",
+            data: JSON.stringify(search),
+            dataType: 'json',
+            cache: false,
+            timeout: 600000,
+            success: function (data) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + JSON.stringify(data, null, 4) + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("SUCCESS : ", data);
+                $("#btn-search-user-wsdl").prop("disabled", false);
+
+            },
+            error: function (e) {
+
+                var json = "<h4>Ajax Response</h4><pre>"
+                    + e.responseText + "</pre>";
+                $('#feedback').html(json);
+
+                console.log("ERROR : ", e);
+                $("#btn-search-user-wsdl").prop("disabled", false);
+
+            }
+        });
+    }
\ No newline at end of file
diff --git a/src/main/resources/templates/ajax.html b/src/main/resources/templates/ajax.html
new file mode 100644
index 0000000..3baa92c
--- /dev/null
+++ b/src/main/resources/templates/ajax.html
@@ -0,0 +1,179 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+
+<head>
+    <title>Spring Boot ajax example</title>
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+
+    <link rel="stylesheet" type="text/css"
+          href="webjars/bootstrap/3.3.7/css/bootstrap.min.css"/>
+    <style>
+        .navbar-header{
+            color: white;
+            font-size: 20px;
+        }
+    </style>
+
+</head>
+<body>
+
+<nav class="navbar navbar-inverse">
+    <div class="container">
+        <div class="navbar-header" >
+            Library
+        </div>
+    </div>
+</nav>
+
+<div class="container" style="min-height: 500px">
+
+    <div class="starter-template">
+        <h1>Library site</h1>
+
+        <div id="feedback"></div>
+
+        <form class="form-horizontal" id="search-form">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Username:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" id="username"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+
+        <form class="form-horizontal" id="search-form-book">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Book Name:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" id="bookTitle"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search-book"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+
+        <form class="form-horizontal" id="search-form-book-titles-that-start-with">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Book Title start with:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" id="bookTitlesThatStartWith"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search-book-titles-that-start-with"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+
+        <form class="form-horizontal" id="search-form-authors">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Authors</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" placeholder="The request body is not required just click search" id="authors"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search-authors"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+        <form class="form-horizontal" id="search-form-authors-filtered-by-copyrightYear">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Copyright year:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control"  placeholder="The request body should be a json as: { publisher : Wiley-IEEE Press, authorName : Richard }" id="authorsFilteredByCopyrightYear"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search-authors-filtered-by-copyrightYear"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+        <form class="form-horizontal" id="search-form-authors-filtered-by-publisher-and-name">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Publisher and author name filters:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" id="authorsFilteredByPublisherAndName"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-search-authors-filtered-by-publisher-and-name"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+
+
+        <form class="form-horizontal" id="create-form-booked-book">
+            <div class="form-group form-group-lg">
+                <label class="col-sm-2 control-label">Booked book json:</label>
+                <div class="col-sm-10">
+                    <input type="text" class="form-control" id="bookedBook"/>
+                </div>
+            </div>
+
+            <div class="form-group">
+                <div class="col-sm-offset-2 col-sm-10">
+                    <button type="submit" id="bth-create-booked-book"
+                            class="btn btn-primary btn-lg">Search
+                    </button>
+                </div>
+            </div>
+        </form>
+
+
+
+    </div>
+
+</div>
+
+<div class="container">
+    <footer>
+        <p>
+            Library
+        </p>
+    </footer>
+</div>
+
+<script type="text/javascript"
+        src="webjars/jquery/2.2.4/jquery.min.js"></script>
+
+<script type="text/javascript" src="js/main.js"></script>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/src/main/resources/user.xml b/src/main/resources/user.xml
new file mode 100644
index 0000000..dcfcc49
--- /dev/null
+++ b/src/main/resources/user.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Digital Library --><library>
+    <user_list>
+        <user_data>
+            <id>user_1</id>
+            <user_name>Johnson Smith</user_name>
+            <user_password>password</user_password>
+            <user_email>john@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_2</id>
+            <user_name>Jeff Stone</user_name>
+            <user_password>password</user_password>
+            <user_email>jeff@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_3</id>
+            <user_name>Robert White</user_name>
+            <user_password>password</user_password>
+            <user_email>robert@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_4</id>
+            <user_name>Markus Zusak</user_name>
+            <user_password>password</user_password>
+            <user_email>markus@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_5</id>
+            <user_name>Jessica Hover</user_name>
+            <user_password>password</user_password>
+            <user_email>jessica@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_6</id>
+            <user_name>Eric Wing</user_name>
+            <user_password>password</user_password>
+            <user_email>eric@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_7</id>
+            <user_name>Christopher West</user_name>
+            <user_password>password</user_password>
+            <user_email>christopher@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_8</id>
+            <user_name>Daniel Right</user_name>
+            <user_password>password</user_password>
+            <user_email>daniel@gmail.com</user_email>
+        </user_data>
+
+        <user_data>
+            <id>user_9</id>
+            <user_name>Matt Huang</user_name>
+            <user_password>password</user_password>
+            <user_email>matt@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_10</id>
+            <user_name>Rose Peterson</user_name>
+            <user_password>password</user_password>
+            <user_email>rose@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_11</id>
+            <user_name>Paul Simons</user_name>
+            <user_password>password</user_password>
+            <user_email>paul@gmail.com</user_email>
+
+        </user_data>
+
+        <user_data>
+            <id>user_12</id>
+            <user_name>Mark Wilson</user_name>
+            <user_password>password</user_password>
+            <user_email>mark@gmail.com</user_email>
+        </user_data>
+
+        <user_data>
+            <id>user_13</id>
+            <user_name>Joe Frost</user_name>
+            <user_password>password</user_password>
+            <user_email>joe@gmail.com</user_email>
+        </user_data>
+
+        <user_data>
+            <id>user_14</id>
+            <user_name>Richard William</user_name>
+            <user_password>password</user_password>
+            <user_email>richard@gmail.com</user_email>
+        </user_data>
+
+        <user_data>
+            <id>user_15</id>
+            <user_name>Antonio Ron</user_name>
+            <user_password>password</user_password>
+            <user_email>antonio@gmail.com</user_email>
+        </user_data>
+        <user_data>
+            <id>user_16</id>
+            <user_name>Gary Thomson</user_name>
+            <user_password>password</user_password>
+            <user_email>gary@gmail.com</user_email>
+        </user_data>
+        <user_data><user_name>Anne Smith</user_name><id>user_17</id><user_password>password</user_password><user_email>anne@gmail.com</user_email></user_data>
+    <user_data><user_name>Alice Popescu</user_name><id>user_1234</id><user_password>password</user_password><user_email>alice@gmail.com</user_email></user_data>
+    <user_data><user_name>Bob Winter</user_name><id>user_12345</id><user_password>password</user_password><user_email>bob@gmail.com</user_email></user_data><user_data><user_name>Christopher North</user_name><id>user_123</id><user_password>password</user_password><user_email>christopher@gmail.com</user_email></user_data></user_list>
+</library>
\ No newline at end of file
diff --git a/src/main/resources/user.xsd b/src/main/resources/user.xsd
new file mode 100644
index 0000000..e3aad04
--- /dev/null
+++ b/src/main/resources/user.xsd
@@ -0,0 +1,29 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           xmlns:tns="http://part2.com/models/soap/user"
+           targetNamespace="http://part2.com/models/soap/user"
+           elementFormDefault="qualified">
+
+    <xs:element name="getUserRequest">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="id" type="xs:int"/>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+
+    <xs:element name="getUserResponse">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="user" type="tns:user"/>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+    <xs:complexType name="user">
+        <xs:sequence>
+            <xs:element name="id" type="xs:int"/>
+            <xs:element name="user_name" type="xs:string"/>
+            <xs:element name="user_password" type="xs:string"/>
+            <xs:element name="user_email" type="xs:string"/>
+        </xs:sequence>
+    </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/src/test/java/com/example/demo/DemoApplicationTests.java b/src/test/java/com/example/demo/DemoApplicationTests.java
deleted file mode 100644
index 2778a6a..0000000
--- a/src/test/java/com/example/demo/DemoApplicationTests.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.example.demo;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
-
-@SpringBootTest
-class DemoApplicationTests {
-
-	@Test
-	void contextLoads() {
-	}
-
-}
